





1. The Machine Learning Landscape - Hands-On Machine Learning with Scikit-Learn, Keras, and TensorFlow, 2nd Edition [Book]






























Skip to main content













Sign In
Try Now




Teams

For business
For government
For higher ed


Individuals
Features

All features
Courses
Certifications
Interactive learning
Live events
Answers
Insights reporting


Blog
Content sponsorship



















Hands-On Machine Learning with Scikit-Learn, Keras, and TensorFlow, 2nd Edition by Aurélien Géron




Buy on Amazon







Get full access to Hands-On Machine Learning with Scikit-Learn, Keras, and TensorFlow, 2nd Edition and 60K+ other titles, with a free 10-day trial of O'Reilly.
There are also live events, courses curated by job role, and more.

Start your free trial










Chapter 1. The Machine Learning Landscape
When most people hear “Machine Learning,” they picture a robot: a dependable butler or a deadly Terminator, depending on whom you ask. But Machine Learning is not just a futuristic fantasy; it’s already here. In fact, it has been around for decades in some specialized applications, such as Optical Character Recognition (OCR). But the first ML application that really became mainstream, improving the lives of hundreds of millions of people, took over the world back in the 1990s: the spam filter. It’s not exactly a self-aware Skynet, but it does technically qualify as Machine Learning (it has actually learned so well that you seldom need to flag an email as spam anymore). It was followed by hundreds of ML applications that now quietly power hundreds of products and features that you use regularly, from better recommendations to voice search.
Where does Machine Learning start and where does it end? What exactly does it mean for a machine to learn something? If I download a copy of Wikipedia, has my computer really learned something? Is it suddenly smarter? In this chapter we will start by clarifying what Machine Learning is and why you may want to use it.
Then, before we set out to explore the Machine Learning continent, we will take a look at the map and learn about the main regions and the most notable landmarks: supervised versus unsupervised learning, online versus batch learning, instance-based versus model-based learning. Then we will look at the workflow of a typical ML project, discuss the main challenges you may face, and cover how to evaluate and fine-tune a Machine Learning system.
This chapter introduces a lot of fundamental concepts (and jargon) that every data scientist should know by heart. It will be a high-level overview (it’s the only chapter without much code), all rather simple, but you should make sure everything is crystal clear to you before continuing on to the rest of the book. So grab a coffee and let’s get started!
Tip
If you already know all the Machine Learning basics, you may want to skip directly to Chapter 2. If you are not sure, try to answer all the questions listed at the end of the chapter before moving on.


What Is Machine Learning?
Machine Learning is the science (and art) of programming computers so they can learn from data.
Here is a slightly more general definition:

[Machine Learning is the] field of study that gives computers the ability to learn without being explicitly programmed.
Arthur Samuel, 1959

And a more engineering-oriented one:

A computer program is said to learn from experience E with respect to some task T and some performance measure P, if its performance on T, as measured by P, improves with experience E.
Tom Mitchell, 1997

Your spam filter is a Machine Learning program that, given examples of spam emails (e.g., flagged by users) and examples of regular (nonspam, also called “ham”) emails, can learn to flag spam. The examples that the system uses to learn are called the training set. Each training example is called a training instance (or sample). In this case, the task T is to flag spam for new emails, the experience E is the training data, and the performance measure P needs to be defined; for example, you can use the ratio of correctly classified emails. This particular performance measure is called accuracy, and it is often used in classification tasks.
If you just download a copy of Wikipedia, your computer has a lot more data, but it is not suddenly better at any task. Thus, downloading a copy of Wikipedia is not Machine Learning.


Why Use Machine Learning?
Consider how you would write a spam filter using traditional programming techniques (Figure 1-1):


First you would consider what spam typically looks like. You might notice that some words or phrases (such as “4U,” “credit card,” “free,” and “amazing”) tend to come up a lot in the subject line. Perhaps you would also notice a few other patterns in the sender’s name, the email’s body, and other parts of the email.


You would write a detection algorithm for each of the patterns that you noticed, and your program would flag emails as spam if a number of these patterns were detected.


You would test your program and repeat steps 1 and 2 until it was good enough to launch.




Figure 1-1. The traditional approach

Since the problem is difficult, your program will likely become a long list of complex rules—pretty hard to maintain.
In contrast, a spam filter based on Machine Learning techniques automatically learns which words and phrases are good predictors of spam by detecting unusually frequent patterns of words in the spam examples compared to the ham examples (Figure 1-2). The program is much shorter, easier to maintain, and most likely more accurate.
What if spammers notice that all their emails containing “4U” are blocked? They might start writing “For U” instead. A spam filter using traditional programming techniques would need to be updated to flag “For U” emails. If spammers keep working around your spam filter, you will need to keep writing new rules forever.
In contrast, a spam filter based on Machine Learning techniques automatically notices that “For U” has become unusually frequent in spam flagged by users, and it starts flagging them without your intervention (Figure 1-3).


Figure 1-2. The Machine Learning approach



Figure 1-3. Automatically adapting to change

Another area where Machine Learning shines is for problems that either are too complex for traditional approaches or have no known algorithm. For example, consider speech recognition. Say you want to start simple and write a program capable of distinguishing the words “one” and “two.” You might notice that the word “two” starts with a high-pitch sound (“T”), so you could hardcode an algorithm that measures high-pitch sound intensity and use that to distinguish ones and twos⁠—but obviously this technique will not scale to thousands of words spoken by millions of very different people in noisy environments and in dozens of languages. The best solution (at least today) is to write an algorithm that learns by itself, given many example recordings for each word.
Finally, Machine Learning can help humans learn (Figure 1-4). ML algorithms can be inspected to see what they have learned (although for some algorithms this can be tricky). For instance, once a spam filter has been trained on enough spam, it can easily be inspected to reveal the list of words and combinations of words that it believes are the best predictors of spam. Sometimes this will reveal unsuspected correlations or new trends, and thereby lead to a better understanding of the problem. Applying ML techniques to dig into large amounts of data can help discover patterns that were not immediately apparent. This is called data mining.


Figure 1-4. Machine Learning can help humans learn

To summarize, Machine Learning is great for:


Problems for which existing solutions require a lot of fine-tuning or long
lists of rules: one Machine Learning algorithm can often simplify code and perform better than the traditional approach.


Complex problems for which using a traditional approach yields no good solution: the best
Machine Learning techniques can perhaps find a solution.


Fluctuating environments: a Machine Learning system can adapt to new data.


Getting insights about complex problems and large amounts of data.




Examples of Applications
Let’s look at some concrete examples of Machine Learning tasks, along with the techniques that can tackle them:

Analyzing images of products on a production line to automatically classify them

This is image classification, typically performed using convolutional neural networks (CNNs; see Chapter 14).

Detecting tumors in brain scans

This is semantic segmentation, where each pixel in the image is classified (as we want to determine the exact location and shape of tumors), typically using CNNs as well.

Automatically classifying news articles

This is natural language processing (NLP), and more specifically text classification, which can be tackled using recurrent neural networks (RNNs), CNNs, or Transformers (see Chapter 16).

Automatically flagging offensive comments on discussion forums

This is also text classification, using the same NLP tools.

Summarizing long documents automatically

This is a branch of NLP called text summarization, again using the same tools.

Creating a chatbot or a personal assistant

This involves many NLP components, including natural language understanding (NLU) and question-answering modules.

Forecasting your company’s revenue next year, based on many performance metrics

This is a regression task (i.e., predicting values) that may be tackled using any regression model, such as a Linear Regression or Polynomial Regression model (see Chapter 4), a regression SVM (see Chapter 5), a regression Random Forest (see Chapter 7), or an artificial neural network (see Chapter 10). If you want to take into account sequences of past performance metrics, you may want to use RNNs, CNNs, or Transformers (see Chapters 15 and 16).

Making your app react to voice commands

This is speech recognition, which requires processing audio samples: since they are long and complex sequences, they are typically processed using RNNs, CNNs, or Transformers (see Chapters 15 and 16).

Detecting credit card fraud

This is anomaly detection (see Chapter 9).

Segmenting clients based on their purchases so that you can design a different marketing strategy for each segment

This is clustering (see Chapter 9).

Representing a complex, high-dimensional dataset in a clear and insightful diagram

This is data visualization, often involving dimensionality reduction techniques (see Chapter 8).

Recommending a product that a client may be interested in, based on past purchases

This is a recommender system. One approach is to feed past purchases (and other information about the client) to an artificial neural network (see Chapter 10), and get it to output the most likely next purchase. This neural net would typically be trained on past sequences of purchases across all clients.

Building an intelligent bot for a game

This is often tackled using Reinforcement Learning (RL; see Chapter 18), which is a branch of Machine Learning that trains agents (such as bots) to pick the actions that will maximize their rewards over time (e.g., a bot may get a reward every time the player loses some life points), within a given environment (such as the game). The famous AlphaGo program that beat the world champion at the game of Go was built using RL.


This list could go on and on, but hopefully it gives you a sense of the incredible breadth and complexity of the tasks that Machine Learning can tackle, and the types of techniques that you would use for each task.


Types of Machine Learning Systems
There are so many different types of Machine Learning systems that it is useful to classify them in broad categories, based on the following criteria:


Whether or not they are trained with human supervision (supervised, unsupervised, semisupervised, and Reinforcement Learning)


Whether or not they can learn incrementally on the fly (online versus batch learning)


Whether they work by simply comparing new data points to known data points, or instead by detecting patterns in the training data and building a predictive model, much like scientists do (instance-based versus model-based learning)


These criteria are not exclusive; you can combine them in any way you like. For example, a state-of-the-art spam filter may learn on the fly using a deep neural network model trained using examples of spam and ham; this makes it an online, model-based, supervised learning system.
Let’s look at each of these criteria a bit more closely.

Supervised/Unsupervised Learning
Machine Learning systems can be classified according to the amount and type of supervision they get during training. There are four major categories: supervised learning, unsupervised learning, semisupervised learning, and Reinforcement Learning.

Supervised learning
In supervised learning, the training set you feed to the algorithm includes the desired solutions, called labels (Figure 1-5).


Figure 1-5. A labeled training set for spam classification (an example of supervised learning)

A typical supervised learning task is classification. The spam filter is a good example of this: it is trained with many example emails along with their class (spam or ham), and it must learn how to classify new emails.
Another typical task is to predict a target numeric value, such as the price of a car, given a set of features (mileage, age, brand, etc.) called predictors. This sort of task is called regression (Figure 1-6).1 To train the system, you need to give it many examples of cars, including both their predictors and their labels (i.e., their prices).
Note
In Machine Learning an attribute is a data type (e.g., “mileage”), while a feature has several meanings, depending on the context, but generally means an attribute plus its value (e.g., “mileage = 15,000”). Many people use the words attribute and feature interchangeably.

Note that some regression algorithms can be used for classification as well, and vice versa. For example, Logistic Regression is commonly used for classification, as it can output a value that corresponds to the probability of belonging to a given class (e.g., 20% chance of being spam).


Figure 1-6. A regression problem: predict a value, given an input feature (there are usually multiple input features, and sometimes multiple output values)

Here are some of the most important supervised learning algorithms (covered in this book):


k-Nearest Neighbors


Linear Regression


Logistic Regression


Support Vector Machines (SVMs)


Decision Trees and Random Forests


Neural networks2




Unsupervised learning
In unsupervised learning, as you might guess, the training data is unlabeled (Figure 1-7). The system tries to learn without a teacher.


Figure 1-7. An unlabeled training set for unsupervised learning

Here are some of the most important unsupervised learning algorithms (most of these are covered in Chapters 8 and
9):


Clustering


K-Means


DBSCAN


Hierarchical Cluster Analysis (HCA)




Anomaly detection and novelty detection


One-class SVM


Isolation Forest




Visualization and dimensionality reduction


Principal Component Analysis (PCA)


Kernel PCA


Locally Linear Embedding (LLE)


t-Distributed Stochastic Neighbor Embedding (t-SNE)




Association rule learning


Apriori


Eclat




For example, say you have a lot of data about your blog’s visitors. You may want to run a clustering algorithm to try to detect groups of similar visitors (Figure 1-8). At no point do you tell the algorithm which group a visitor belongs to: it finds those connections without your help. For example, it might notice that 40% of your visitors are males who love comic books and generally read your blog in the evening, while 20% are young sci-fi lovers who visit during the weekends. If you use a hierarchical clustering algorithm, it may also subdivide each group into smaller groups. This may help you target your posts for each group.


Figure 1-8. Clustering

Visualization algorithms are also good examples of unsupervised learning algorithms: you feed them a lot of complex and unlabeled data, and they output a 2D or 3D representation of your data that can easily be plotted (Figure 1-9). These algorithms try to preserve as much structure as they can (e.g., trying to keep separate clusters in the input space from overlapping in the visualization) so that you can understand how the data is organized and perhaps identify unsuspected patterns.


Figure 1-9. Example of a t-SNE visualization highlighting semantic clusters3

A related task is dimensionality reduction, in which the goal is to simplify the data without losing too much information. One way to do this is to merge several correlated features into one. For example, a car’s mileage may be strongly correlated with its age, so the dimensionality reduction algorithm will merge them into one feature that represents the car’s wear and tear. This is called feature extraction.
Tip
It is often a good idea to try to reduce the dimension of your training data using a dimensionality reduction algorithm before you feed it to another Machine Learning algorithm (such as a supervised learning algorithm). It will run much faster, the data will take up less disk and memory space, and in some cases it may also perform better.

Yet another important unsupervised task is anomaly detection—for example, detecting unusual credit card transactions to prevent fraud, catching manufacturing defects, or automatically removing outliers from a dataset before feeding it to another learning algorithm. The system is shown mostly normal instances during training, so it learns to recognize them; then, when it sees a new instance, it can tell whether it looks like a normal one or whether it is likely an anomaly (see Figure 1-10). A very similar task is novelty detection: it aims to detect new instances that look different from all instances in the training set. This requires having a very “clean” training set, devoid of any instance that you would like the algorithm to detect. For example, if you have thousands of pictures of dogs, and 1% of these pictures represent Chihuahuas, then a novelty detection algorithm should not treat new pictures of Chihuahuas as novelties. On the other hand, anomaly detection algorithms may consider these dogs as so rare and so different from other dogs that they would likely classify them as anomalies (no offense to Chihuahuas).


Figure 1-10. Anomaly detection

Finally, another common unsupervised task is association rule learning, in which the goal is to dig into large amounts of data and discover interesting relations between attributes. For example, suppose you own a supermarket. Running an association rule on your sales logs may reveal that people who purchase barbecue sauce and potato chips also tend to buy steak. Thus, you may want to place these items close to one another.


Semisupervised learning
Since labeling data is usually time-consuming and costly, you will often have plenty of unlabeled instances, and few labeled instances. Some algorithms can deal with data that’s partially labeled. This is called semisupervised learning (Figure 1-11).


Figure 1-11. Semisupervised learning with two classes (triangles and squares): the unlabeled examples (circles) help classify a new instance (the cross) into the triangle class rather than the square class, even though it is closer to the labeled squares

Some photo-hosting services, such as Google Photos, are good examples of this. Once you upload all your family photos to the service, it automatically recognizes that the same person A shows up in photos 1, 5, and 11, while another person B shows up in photos 2, 5, and 7. This is the unsupervised part of the algorithm (clustering). Now all the system needs is for you to tell it who these people are. Just add one label per person4 and it is able to name everyone in every photo, which is useful for searching photos.
Most semisupervised learning algorithms are combinations of unsupervised and supervised algorithms. For example, deep belief networks (DBNs) are based on unsupervised components called restricted Boltzmann machines (RBMs) stacked on top of one another. RBMs are trained sequentially in an unsupervised manner, and then the whole system is fine-tuned using supervised learning techniques.


Reinforcement Learning
Reinforcement Learning is a very different beast. The learning system, called an agent in this context, can observe the environment, select and perform actions, and get rewards in return (or penalties in the form of negative rewards, as shown in Figure 1-12). It must then learn by itself what is the best strategy, called a policy, to get the most reward over time. A policy defines what action the agent should choose when it is in a given situation.


Figure 1-12. Reinforcement Learning

For example, many robots implement Reinforcement Learning algorithms to learn how to walk. DeepMind’s AlphaGo program is also a good example of Reinforcement Learning: it made the headlines in May 2017 when it beat the world champion Ke Jie at the game of Go. It learned its winning policy by analyzing millions of games, and then playing many games against itself. Note that learning was turned off during the games against the champion; AlphaGo was just applying the policy it had learned.



Batch and Online Learning
Another criterion used to classify Machine Learning systems is whether or not the system can learn incrementally from a stream of incoming data.

Batch learning
In batch learning, the system is incapable of learning incrementally: it must be trained using all the available data. This will generally take a lot of time and computing resources, so it is typically done offline. First the system is trained, and then it is launched into production and runs without learning anymore; it just applies what it has learned. This is called offline learning.
If you want a batch learning system to know about new data (such as a new type of spam), you need to train a new version of the system from scratch on the full dataset (not just the new data, but also the old data), then stop the old system and replace it with the new one.
Fortunately, the whole process of training, evaluating, and launching a Machine Learning system can be automated fairly easily (as shown in Figure 1-3), so even a batch learning system can adapt to change. Simply update the data and train a new version of the system from scratch as often as needed.
This solution is simple and often works fine, but training using the full set of data can take many hours, so you would typically train a new system only every 24 hours or even just weekly. If your system needs to adapt to rapidly changing data (e.g., to predict stock prices), then you need a more reactive solution.
Also, training on the full set of data requires a lot of computing resources (CPU, memory space, disk space, disk I/O, network I/O, etc.). If you have a lot of data and you automate your system to train from scratch every day, it will end up costing you a lot of money. If the amount of data is huge, it may even be impossible to use a batch learning algorithm.
Finally, if your system needs to be able to learn autonomously and it has limited resources (e.g., a smartphone application or a rover on Mars), then carrying around large amounts of training data and taking up a lot of resources to train for hours every day is a showstopper.
Fortunately, a better option in all these cases is to use algorithms that are capable of learning incrementally.


Online learning
In online learning, you train the system incrementally by feeding it data instances sequentially, either individually or in small groups called mini-batches. Each learning step is fast and cheap, so the system can learn about new data on the fly, as it arrives (see Figure 1-13).


Figure 1-13. In online learning, a model is trained and launched into production, and then it keeps learning as new data comes in

Online learning is great for systems that receive data as a continuous flow (e.g., stock prices) and need to adapt to change rapidly or autonomously. It is also a good option if you have limited computing resources: once an online learning system has learned about new data instances, it does not need them anymore, so you can discard them (unless you want to be able to roll back to a previous state and “replay” the data). This can save a huge amount of space.
Online learning algorithms can also be used to train systems on huge datasets that cannot fit in one machine’s main memory (this is called out-of-core learning). The algorithm loads part of the data, runs a training step on that data, and repeats the process until it has run on all of the data (see Figure 1-14).
Warning
Out-of-core learning is usually done offline (i.e., not on the live system), so online learning can be a confusing name. Think of it as incremental learning.

One important parameter of online learning systems is how fast they should adapt to changing data: this is called the learning rate. If you set a high learning rate, then your system will rapidly adapt to new data, but it will also tend to quickly forget the old data (you don’t want a spam filter to flag only the latest kinds of spam it was shown). Conversely, if you set a low learning rate, the system will have more inertia; that is, it will learn more slowly, but it will also be less sensitive to noise in the new data or to sequences of nonrepresentative data points (outliers).


Figure 1-14. Using online learning to handle huge datasets

A big challenge with online learning is that if bad data is fed to the system, the system’s performance will gradually decline. If it’s a live system, your clients will notice. For example, bad data could come from a malfunctioning sensor on a robot, or from someone spamming a search engine to try to rank high in search results. To reduce this risk, you need to monitor your system closely and promptly switch learning off (and possibly revert to a previously working state) if you detect a drop in performance. You may also want to monitor the input data and react to abnormal data (e.g., using an anomaly detection algorithm).



Instance-Based Versus Model-Based Learning
One more way to categorize Machine Learning systems is by how they generalize. Most Machine Learning tasks are about making predictions. This means that given a number of training examples, the system needs to be able to make good predictions for (generalize to) examples it has never seen before. Having a good performance measure on the training data is good, but insufficient; the true goal is to perform well on new instances.
There are two main approaches to generalization: instance-based learning and model-based learning.

Instance-based learning
Possibly the most trivial form of learning is simply to learn by heart. If you were to create a spam filter this way, it would just flag all emails that are identical to emails that have already been flagged by users—not the worst solution, but certainly not the best.
Instead of just flagging emails that are identical to known spam emails, your spam filter could be programmed to also flag emails that are very similar to known spam emails. This requires a measure of similarity between two emails. A (very basic) similarity measure between two emails could be to count the number of words they have in common. The system would flag an email as spam if it has many words in common with a known spam email.
This is called instance-based learning: the system learns the examples by heart, then generalizes to new cases by using a similarity measure to compare them to the learned examples (or a subset of them). For example, in Figure 1-15 the new instance would be classified as a triangle because the majority of the most similar instances belong to that class.


Figure 1-15. Instance-based learning



Model-based learning
Another way to generalize from a set of examples is to build a model of these examples and then use that model to make predictions. This is called model-based learning (Figure 1-16).


Figure 1-16. Model-based learning

For example, suppose you want to know if money makes people happy, so you download the Better Life Index data from the OECD’s website and stats about gross domestic product (GDP) per capita from the IMF’s website. Then you join the tables and sort by GDP per capita. Table 1-1 shows an excerpt of what you get.

Table 1-1. Does money make people happier?


Country
GDP per capita (USD)
Life satisfaction




Hungary
12,240
4.9


Korea
27,195
5.8


France
37,675
6.5


Australia
50,962
7.3


United States
55,805
7.2



Let’s plot the data for these countries (Figure 1-17).


Figure 1-17. Do you see a trend here?

There does seem to be a trend here! Although the data is noisy (i.e., partly random), it looks like life satisfaction goes up more or less linearly as the country’s GDP per capita increases. So you decide to model life satisfaction as a linear function of GDP per capita. This step is called model selection: you selected a linear model of life satisfaction with just one attribute, GDP per capita (Equation 1-1).

Equation 1-1. A simple linear model


life_satisfaction
=
θ 0 
+
θ 1 
×
GDP_per_capita



This model has two model parameters, θ0 and θ1.5 By tweaking these parameters, you can make your model represent any linear function, as shown in Figure 1-18.


Figure 1-18. A few possible linear models

Before you can use your model, you need to define the parameter values θ0 and θ1. How can you know which values will make your model perform best? To answer this question, you need to specify a performance measure. You can either define a utility function (or fitness function) that measures how good your model is, or you can define a cost function that measures how bad it is. For Linear Regression problems, people typically use a cost function that measures the distance between the linear model’s predictions and the training examples; the objective is to minimize this distance.
This is where the Linear Regression algorithm comes in: you feed it your training examples, and it finds the parameters that make the linear model fit best to your data. This is called training the model. In our case, the algorithm finds that the optimal parameter values are θ0 = 4.85 and θ1 = 4.91 × 10–5.
Warning
Confusingly, the same word “model” can refer to a type of model (e.g., Linear Regression), to a fully specified model architecture (e.g., Linear Regression with one input and one output), or to the final trained model ready to be used for predictions (e.g., Linear Regression with one input and one output, using θ0 = 4.85 and θ1 = 4.91 × 10–5). Model selection consists in choosing the type of model and fully specifying its architecture. Training a model means running an algorithm to find the model parameters that will make it best fit the training data (and hopefully make good predictions on new data).

Now the model fits the training data as closely as possible (for a linear model), as you can see in Figure 1-19.


Figure 1-19. The linear model that fits the training data best

You are finally ready to run the model to make predictions. For example, say you want to know how happy Cypriots are, and the OECD data does not have the answer. Fortunately, you can use your model to make a good prediction: you look up Cyprus’s GDP per capita, find $22,587, and then apply your model and find that life satisfaction is likely to be somewhere around 4.85 + 22,587 × 4.91 × 10-5 = 5.96.
To whet your appetite, Example 1-1 shows the Python code that loads the data, prepares it,6 creates a scatterplot for visualization, and then trains a linear model and makes a prediction.7

Example 1-1. Training and running a linear model using Scikit-Learn
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
import sklearn.linear_model

# Load the data
oecd_bli = pd.read_csv("oecd_bli_2015.csv", thousands=',')
gdp_per_capita = pd.read_csv("gdp_per_capita.csv",thousands=',',delimiter='\t',
                             encoding='latin1', na_values="n/a")


# Prepare the data
country_stats = prepare_country_stats(oecd_bli, gdp_per_capita)
X = np.c_[country_stats["GDP per capita"]]
y = np.c_[country_stats["Life satisfaction"]]

# Visualize the data
country_stats.plot(kind='scatter', x="GDP per capita", y='Life satisfaction')
plt.show()

# Select a linear model
model = sklearn.linear_model.LinearRegression()

# Train the model
model.fit(X, y)

# Make a prediction for Cyprus
X_new = [[22587]]  # Cyprus's GDP per capita
print(model.predict(X_new)) # outputs [[ 5.96242338]]
Note
If you had used an instance-based learning algorithm instead, you would have found that Slovenia has the closest GDP per capita to that of Cyprus ($20,732), and since the OECD data tells us that Slovenians’ life satisfaction is 5.7, you would have predicted a life satisfaction of 5.7 for Cyprus. If you zoom out a bit and look at the two next-closest countries, you will find Portugal and Spain with life satisfactions of 5.1 and 6.5, respectively. Averaging these three values, you get 5.77, which is pretty close to your model-based prediction. This simple algorithm is called k-Nearest Neighbors regression (in this example, k = 3).
Replacing the Linear Regression model with k-Nearest Neighbors regression in the previous code is as simple as replacing these two lines:
import sklearn.linear_model
model = sklearn.linear_model.LinearRegression()
with these two:
import sklearn.neighbors
model = sklearn.neighbors.KNeighborsRegressor(
    n_neighbors=3)

If all went well, your model will make good predictions. If not, you may need to use more attributes (employment rate, health, air pollution, etc.), get more or better-quality training data, or perhaps select a more powerful model (e.g., a Polynomial Regression model).
In summary:


You studied the data.


You selected a model.


You trained it on the training data (i.e., the learning algorithm searched for the model parameter values that minimize a cost function).


Finally, you applied the model to make predictions on new cases (this is called inference), hoping that this model will generalize well.


This is what a typical Machine Learning project looks like. In Chapter 2 you will experience this firsthand by going through a project end to end.
We have covered a lot of ground so far: you now know what Machine Learning is really about, why it is useful, what some of the most common categories of ML systems are, and what a typical project workflow looks like. Now let’s look at what can go wrong in learning and prevent you from making accurate predictions.




Main Challenges of Machine Learning
In short, since your main task is to select a learning algorithm and train it on some data, the two things that can go wrong are “bad algorithm” and “bad data.” Let’s start with examples of bad data.

Insufficient Quantity of Training Data
For a toddler to learn what an apple is, all it takes is for you to point to an apple and say “apple” (possibly repeating this procedure a few times). Now the child is able to recognize apples in all sorts of colors and shapes. Genius.
Machine Learning is not quite there yet; it takes a lot of data for most Machine Learning algorithms to work properly. Even for very simple problems you typically need thousands of examples, and for complex problems such as image or speech recognition you may need millions of examples (unless you can reuse parts of an existing model).

The Unreasonable Effectiveness of Data
In a famous paper published in 2001, Microsoft researchers Michele Banko and Eric Brill showed that very different Machine Learning algorithms, including fairly simple ones, performed almost identically well on a complex problem of natural language disambiguation8 once they were given enough data (as you can see in Figure 1-20).


Figure 1-20. The importance of data versus algorithms9

As the authors put it, “these results suggest that we may want to reconsider the trade-off between spending time and money on algorithm development versus spending it on corpus development.”
The idea that data matters more than algorithms for complex problems was further popularized by Peter Norvig et al. in a paper titled “The Unreasonable Effectiveness of Data”, published in 2009.10  It should be noted, however, that small- and medium-sized datasets are still very common, and it is not always easy or cheap to get extra training data⁠—so don’t abandon algorithms just yet.



Nonrepresentative Training Data
In order to generalize well, it is crucial that your training data be representative of the new cases you want to generalize to. This is true whether you use instance-based learning or model-based learning.
For example, the set of countries we used earlier for training the linear model was not perfectly representative; a few countries were missing. Figure 1-21 shows what the data looks like when you add the missing countries.


Figure 1-21. A more representative training sample

If you train a linear model on this data, you get the solid line, while the old model is represented by the dotted line. As you can see, not only does adding a few missing countries significantly alter the model, but it makes it clear that such a simple linear model is probably never going to work well. It seems that very rich countries are not happier than moderately rich countries (in fact, they seem unhappier), and conversely some poor countries seem happier than many rich countries.
By using a nonrepresentative training set, we trained a model that is unlikely to make accurate predictions, especially for very poor and very rich countries.
It is crucial to use a training set that is representative of the cases you want to generalize to. This is often harder than it sounds: if the sample is too small, you will have sampling noise (i.e., nonrepresentative data as a result of chance), but even very large samples can be nonrepresentative if the sampling method is flawed. This is called sampling bias.

Examples of Sampling Bias
Perhaps the most famous example of sampling bias happened during the US presidential election in 1936, which pitted Landon against Roosevelt: the Literary Digest conducted a very large poll, sending mail to about 10 million people. It got 2.4 million answers, and predicted with high confidence that Landon would get 57% of the votes. Instead, Roosevelt won with 62% of the votes. The flaw was in the Literary Digest’s sampling method:


First, to obtain the addresses to send the polls to, the Literary Digest used telephone directories, lists of magazine subscribers, club membership lists, and the like. All of these lists tended to favor wealthier people, who were more likely to vote Republican (hence Landon).


Second, less than 25% of the people who were polled answered. Again this introduced a sampling bias, by potentially ruling out people who didn’t care much about politics, people who didn’t like the Literary Digest, and other key groups. This is a special type of sampling bias called nonresponse bias.


Here is another example: say you want to build a system to recognize funk music videos. One way to build your training set is to search for “funk music” on YouTube and use the resulting videos. But this assumes that YouTube’s search engine returns a set of videos that are representative of all the funk music videos on YouTube. In reality, the search results are likely to be biased toward popular artists (and if you live in Brazil you will get a lot of “funk carioca” videos, which sound nothing like James Brown). On the other hand, how else can you get a large training set?



Poor-Quality Data
Obviously, if your training data is full of errors, outliers, and noise (e.g., due to poor-quality measurements), it will make it harder for the system to detect the underlying patterns, so your system is less likely to perform well. It is often well worth the effort to spend time cleaning up your training data. The truth is, most data scientists spend a significant part of their time doing just that. The following are a couple of examples of when you’d want to clean up training data:


If some instances are clearly outliers, it may help to simply discard them or try to fix the errors manually.


If some instances are missing a few features (e.g., 5% of your customers did not specify their age), you must decide whether you want to ignore this attribute altogether, ignore these instances, fill in the missing values (e.g., with the median age), or train one model with the feature and one model without it.




Irrelevant Features
As the saying goes: garbage in, garbage out. Your system will only be capable of learning if the training data contains enough relevant features and not too many irrelevant ones. A critical part of the success of a Machine Learning project is coming up with a good set of features to train on. This process, called feature engineering, involves the following steps:


Feature selection (selecting the most useful features to train on among existing features)


Feature extraction (combining existing features to produce a more useful one⁠—as we saw earlier, dimensionality reduction algorithms can help)


Creating new features by gathering new data


Now that we have looked at many examples of bad data, let’s look at a couple of examples of bad algorithms.


Overfitting the Training Data
Say you are visiting a foreign country and the taxi driver rips you off. You might be tempted to say that all taxi drivers in that country are thieves. Overgeneralizing is something that we humans do all too often, and unfortunately machines can fall into the same trap if we are not careful. In Machine Learning this is called overfitting: it means that the model performs well on the training data, but it does not generalize well.
Figure 1-22 shows an example of a high-degree polynomial life satisfaction model that strongly overfits the training data. Even though it performs much better on the training data than the simple linear model, would you really trust its predictions?


Figure 1-22. Overfitting the training data

Complex models such as deep neural networks can detect subtle patterns in the data, but if the training set is noisy, or if it is too small (which introduces sampling noise), then the model is likely to detect patterns in the noise itself. Obviously these patterns will not generalize to new instances. For example, say you feed your life satisfaction model many more attributes, including uninformative ones such as the country’s name. In that case, a complex model may detect patterns like the fact that all countries in the training data with a w in their name have a life satisfaction greater than 7: New Zealand (7.3), Norway (7.4), Sweden (7.2), and Switzerland (7.5). How confident are you that the w-satisfaction rule generalizes to Rwanda or Zimbabwe? Obviously this pattern occurred in the training data by pure chance, but the model has no way to tell whether a pattern is real or simply the result of noise in the data.
Warning
Overfitting happens when the model is too complex relative to the amount and noisiness of the training data. Here are possible solutions:


Simplify the model by selecting one with fewer parameters (e.g., a linear model rather than a high-degree polynomial model), by reducing the number of attributes in the training data, or by constraining the model.


Gather more training data.


Reduce the noise in the training data (e.g., fix data errors and remove outliers).



Constraining a model to make it simpler and reduce the risk of overfitting is called regularization. For example, the linear model we defined earlier has two parameters, θ0 and θ1. This gives the learning algorithm two degrees of freedom to adapt the model to the training data: it can tweak both the height (θ0) and the slope (θ1) of the line. If we forced θ1 = 0, the algorithm would have only one degree of freedom and would have a much harder time fitting the data properly: all it could do is move the line up or down to get as close as possible to the training instances, so it would end up around the mean. A very simple model indeed! If we allow the algorithm to modify θ1 but we force it to keep it small, then the learning algorithm will effectively have somewhere in between one and two degrees of freedom. It will produce a model that’s simpler than one with two degrees of freedom, but more complex than one with just one. You want to find the right balance between fitting the training data perfectly and keeping the model simple enough to ensure that it will generalize well.
Figure 1-23 shows three models. The dotted line represents the original model that was trained on the countries represented as circles (without the countries represented as squares), the dashed line is our second model trained with all countries (circles and squares), and the solid line is a model trained with the same data as the first model but with a regularization constraint. You can see that regularization
forced the model to have a smaller slope: this model does not fit the training data (circles) as well as the first model, but it actually generalizes better to new examples that it did not see during training (squares).


Figure 1-23. Regularization reduces the risk of overfitting

The amount of regularization to apply during learning can be controlled by a hyperparameter. A hyperparameter is a parameter of a learning algorithm (not of the model). As such, it is not affected by the learning algorithm itself; it must be set prior to training and remains constant during training. If you set the regularization hyperparameter to a very large value, you will get an almost flat model (a slope close to zero); the learning algorithm will almost certainly not overfit the training data, but it will be less likely to find a good solution. Tuning hyperparameters is an important part of building a Machine Learning system (you will see a detailed example in the next chapter).


Underfitting the Training Data
As you might guess, underfitting is the opposite of overfitting: it occurs when your model is too simple to learn the underlying structure of the data. For example, a linear model of life satisfaction is prone to underfit; reality is just more complex than the model, so its predictions are bound to be inaccurate, even on the training examples.
Here are the main options for fixing this problem:


Select a more powerful model, with more parameters.


Feed better features to the learning algorithm (feature engineering).


Reduce the constraints on the model (e.g., reduce the regularization hyperparameter).




Stepping Back
By now you know a lot about Machine Learning. However, we went through so many concepts that you may be feeling a little lost, so let’s step back and look at the big picture:


Machine Learning is about making machines get better at some task by learning from data, instead of having to explicitly code rules.


There are many different types of ML systems: supervised or not, batch or online, instance-based or model-based.


In an ML project you gather data in a training set, and you feed the training set to a learning algorithm. If the algorithm is model-based, it tunes some parameters to fit the model to the training set (i.e., to make good predictions on the training set itself), and then hopefully it will be able to make good predictions on new cases as well. If the algorithm is instance-based, it just learns the examples by heart and generalizes to new instances by using a similarity measure to compare them to the learned instances.


The system will not perform well if your training set is too small, or if the data is not representative, is noisy, or is polluted with irrelevant features (garbage in, garbage out). Lastly, your model needs to be neither too simple (in which case it will underfit) nor too complex (in which case it will overfit).


There’s just one last important topic to cover: once you have trained a model, you don’t want to just “hope” it generalizes to new cases. You want to evaluate it and fine-tune it if necessary. Let’s see how to do that.



Testing and Validating
The only way to know how well a model will generalize to new cases is to actually try it out on new cases. One way to do that is to put your model in production and monitor how well it performs. This works well, but if your model is horribly bad, your users will complain—not the best idea.
A better option is to split your data into two sets: the training set and the test set. As these names imply, you train your model using the training set, and you test it using the test set. The error rate on new cases is called the generalization error (or out-of-sample error), and by evaluating your model on the test set, you get an estimate of this error. This value tells you how well your model will perform on instances it has never seen before.
If the training error is low (i.e., your model makes few mistakes on the training set) but the generalization error is high, it means that your model is overfitting the training data.
Tip
It is common to use 80% of the data for training and hold out 20% for testing. However, this depends on the size of the dataset: if it contains 10 million instances, then holding out 1% means your test set will contain 100,000 instances, probably more than enough to get a good estimate of the generalization error.


Hyperparameter Tuning and Model Selection
Evaluating a model is simple enough: just use a test set. But suppose you are hesitating between two types of models (say, a linear model and a polynomial model): how can you decide between them? One option is to train both and compare how well they generalize using the test set.
Now suppose that the linear model generalizes better, but you want to apply some regularization to avoid overfitting. The question is, how do you choose the value of the regularization hyperparameter? One option is to train 100 different models using 100 different values for this hyperparameter. Suppose you find the best hyperparameter value that produces a model with the lowest generalization error⁠—say, just 5% error. You launch this model into production, but unfortunately it does not perform as well as expected and produces 15% errors. What just happened?
The problem is that you measured the generalization error multiple times on the test set, and you adapted the model and hyperparameters to produce the best model for that particular set. This means that the model is unlikely to perform as well on new data.
A common solution to this problem is called holdout validation: you simply hold out part of the training set to evaluate several candidate models and select the best one. The new held-out set is called the validation set (or sometimes the development set, or dev set). More specifically, you train multiple models with various hyperparameters on the reduced training set (i.e., the full training set minus the validation set), and you select the model that performs best on the validation set. After this holdout validation process, you train the best model on the full training set (including the validation set), and this gives you the final model. Lastly, you evaluate this final model on the test set to get an estimate of the generalization error.
This solution usually works quite well. However, if the validation set is too small, then model evaluations will be imprecise: you may end up selecting a suboptimal model by mistake. Conversely, if the validation set is too large, then the remaining training set will be much smaller than the full training set. Why is this bad? Well, since the final model will be trained on the full training set, it is not ideal to compare candidate models trained on a much smaller training set. It would be like selecting the fastest sprinter to participate in a marathon. One way to solve this problem is to perform repeated cross-validation, using many small validation sets. Each model is evaluated once per validation set after it is trained on the rest of the data. By averaging out all the evaluations of a model, you get a much more accurate measure of its performance. There is a drawback, however: the training time is multiplied by the number of validation sets.


Data Mismatch
In some cases, it’s easy to get a large amount of data for training, but this data probably won’t be perfectly representative of the data that will be used in production. For example, suppose you want to create a mobile app to take pictures of flowers and automatically determine their species. You can easily download millions of pictures of flowers on the web, but they won’t be perfectly representative of the pictures that will actually be taken using the app on a mobile device. Perhaps you only have 10,000 representative pictures (i.e., actually taken with the app). In this case, the most important rule to remember is that the validation set and the test set must be as representative as possible of the data you expect to use in production, so they should be composed exclusively of representative pictures: you can shuffle them and put half in the validation set and half in the test set (making sure that no duplicates or near-duplicates end up in both sets). But after training your model on the web pictures, if you observe that the performance of the model on the validation set is disappointing, you will not know whether this is because your model has overfit the training set, or whether this is just due to the mismatch between the web pictures and the mobile app pictures. One solution is to hold out some of the training pictures (from the web) in yet another set that Andrew Ng calls the train-dev set. After the model is trained (on the training set, not on the train-dev set), you can evaluate it on the train-dev set. If it performs well, then the model is not overfitting the training set. If it performs poorly on the validation set, the problem must be coming from the data mismatch. You can try to tackle this problem by preprocessing the web images to make them look more like the pictures that will be taken by the mobile app, and then retraining the model. Conversely, if the model performs poorly on the train-dev set, then it must have overfit the training set, so you should try to simplify or regularize the model, get more training data, and clean up the training data.

No Free Lunch Theorem
A model is a simplified version of the observations. The simplifications are meant to discard the superfluous details that are unlikely to generalize to new instances. To decide what data to discard and what data to keep, you must make assumptions. For example, a linear model makes the assumption that the data is fundamentally linear and that the distance between the instances and the straight line is just noise, which can safely be ignored.
In a famous 1996 paper,11 David Wolpert demonstrated that if you make absolutely no assumption about the data, then there is no reason to prefer one model over any other. This is called the No Free Lunch (NFL) theorem. For some datasets the best model is a linear model, while for other datasets it is a neural network. There is no model that is a priori guaranteed to work better (hence the name of the theorem). The only way to know for sure which model is best is to evaluate them all. Since this is not possible, in practice you make some reasonable assumptions about the data and evaluate only a few reasonable models. For example, for simple tasks you may evaluate linear models with various levels of regularization, and for a complex problem you may evaluate various neural networks.




Exercises
In this chapter we have covered some of the most important concepts in Machine Learning. In the next chapters we will dive deeper and write more code, but before we do, make sure you know how to answer the following questions:


How would you define Machine Learning?


Can you name four types of problems where it shines?


What is a labeled training set?


What are the two most common supervised tasks?


Can you name four common unsupervised tasks?


What type of Machine Learning algorithm would you use to allow a robot to walk in various unknown terrains?


What type of algorithm would you use to segment your customers into multiple groups?


Would you frame the problem of spam detection as a supervised learning problem or an unsupervised learning problem?


What is an online learning system?


What is out-of-core learning?


What type of learning algorithm relies on a similarity measure to make predictions?


What is the difference between a model parameter and a learning algorithm’s hyperparameter?


What do model-based learning algorithms search for? What is the most common strategy they use to succeed? How do they make predictions?


Can you name four of the main challenges in Machine Learning?


If your model performs great on the training data but generalizes poorly to new instances, what is happening? Can you name three possible solutions?


What is a test set, and why would you want to use it?


What is the purpose of a validation set?


What is the train-dev set, when do you need it, and how do you use it?


What can go wrong if you tune hyperparameters using the test set?


Solutions to these exercises are available in Appendix A.

1 Fun fact: this odd-sounding name is a statistics term introduced by Francis Galton while he was studying the fact that the children of tall people tend to be shorter than their parents. Since the children were shorter, he called this regression to the mean. This name was then applied to the methods he used to analyze correlations between variables.2 Some neural network architectures can be unsupervised, such as autoencoders and restricted Boltzmann machines. They can also be semisupervised, such as in deep belief networks and unsupervised pretraining.3 Notice how animals are rather well separated from vehicles and how horses are close to deer but far from birds. Figure reproduced with permission from Richard Socher et al., “Zero-Shot Learning Through Cross-Modal Transfer,” Proceedings of the 26th International Conference on Neural Information Processing Systems 1 (2013): 935–943.4 That’s when the system works perfectly. In practice it often creates a few clusters per person, and sometimes mixes up two people who look alike, so you may need to provide a few labels per person and manually clean up some clusters.5 By convention, the Greek letter θ (theta) is frequently used to represent model parameters.6 The prepare_country_stats() function’s definition is not shown here (see this chapter’s Jupyter notebook if you want all the gory details). It’s just boring pandas code that joins the life satisfaction data from the OECD with the GDP per capita data from the IMF.7 It’s OK if you don’t understand all the code yet; we will present Scikit-Learn in the following chapters.8 For example, knowing whether to write “to,” “two,” or “too,” depending on the context.9 Figure reproduced with permission from Michele Banko and Eric Brill, “Scaling to Very Very Large Corpora for Natural Language Disambiguation,” Proceedings of the 39th Annual Meeting of the Association for Computational Linguistics (2001): 26–33.10 Peter Norvig et al., “The Unreasonable Effectiveness of Data,” IEEE Intelligent Systems 24, no. 2 (2009): 8–12.11 David Wolpert, “The Lack of A Priori Distinctions Between Learning Algorithms,” Neural Computation 8, no. 7 (1996): 1341–1390.


Get Hands-On Machine Learning with Scikit-Learn, Keras, and TensorFlow, 2nd Edition now with the O’Reilly learning platform.
O’Reilly members experience books, live events, courses curated by job role, and more from O’Reilly and nearly 200 top publishers.

Start your free trial












About O’Reilly

Teach/write/train
Careers
Press releases
Media coverage
Community partners
Affiliate program
Submit an RFP
Diversity
O’Reilly for marketers





Support

Contact us
Newsletters
Privacy policy


linkedin-logo
youtube-logo


International

Australia & New Zealand
Hong Kong & Taiwan
India
Indonesia
Japan





Download the O’Reilly App
Take O’Reilly with you and learn anywhere, anytime on your phone and tablet.






Watch on your big screen
View all O’Reilly videos, Superstream events, and Meet the Expert sessions on your home TV.






Do not sell my personal information






© 2024, O’Reilly Media, Inc. All trademarks and registered trademarks appearing on oreilly.com are the property of their respective owners.
We are a participant in the Amazon Services LLC Associates Program, an affiliate advertising program designed to provide a means for us to earn fees by linking to Amazon.com and affiliated sites.
Terms of service • Privacy policy • Editorial independence







Don’t leave empty-handed
Get Mark Richards’s Software Architecture Patterns ebook to better understand how to design components—and how they should interact.
It’s yours, free.
Get it now



Close






Check it out now on O’Reilly
Dive in for free with a 10-day trial of the O’Reilly learning platform—then explore all the other resources our members count on to build skills and solve problems every day.
Start your free trial
Become a member now



Close































2. End-to-End Machine Learning Project - Hands-On Machine Learning with Scikit-Learn, Keras, and TensorFlow, 2nd Edition [Book]






























Skip to main content













Sign In
Try Now




Teams

For business
For government
For higher ed


Individuals
Features

All features
Courses
Certifications
Interactive learning
Live events
Answers
Insights reporting


Blog
Content sponsorship



















Hands-On Machine Learning with Scikit-Learn, Keras, and TensorFlow, 2nd Edition by Aurélien Géron




Buy on Amazon







Get full access to Hands-On Machine Learning with Scikit-Learn, Keras, and TensorFlow, 2nd Edition and 60K+ other titles, with a free 10-day trial of O'Reilly.
There are also live events, courses curated by job role, and more.

Start your free trial










Chapter 2. End-to-End Machine Learning Project
In this chapter you will work through an example project end to end, pretending to be a recently hired data scientist at a real estate company.1 Here are the main steps you will go through:


Look at the big picture.


Get the data.


Discover and visualize the data to gain insights.


Prepare the data for Machine Learning algorithms.


Select a model and train it.


Fine-tune your model.


Present your solution.


Launch, monitor, and maintain your system.



Working with Real Data
When you are learning about Machine Learning, it is best to experiment with real-world data, not artificial datasets. Fortunately, there are thousands of open datasets to choose from, ranging across all sorts of domains. Here are a few places you can look to get data:


Popular open data repositories


UC Irvine Machine Learning Repository


Kaggle datasets


Amazon’s AWS datasets




Meta portals (they list open data repositories)


Data Portals


OpenDataMonitor


Quandl




Other pages listing many popular open data repositories


Wikipedia’s list of Machine Learning datasets


Quora.com


The datasets subreddit




In this chapter we’ll use the California Housing Prices dataset from the StatLib repository2 (see Figure 2-1). This dataset is based on data from the 1990 California census. It is not exactly recent (a nice house in the Bay Area was still affordable at the time), but it has many qualities for learning, so we will pretend it is recent data. ...


Get Hands-On Machine Learning with Scikit-Learn, Keras, and TensorFlow, 2nd Edition now with the O’Reilly learning platform.
O’Reilly members experience books, live events, courses curated by job role, and more from O’Reilly and nearly 200 top publishers.

Start your free trial












About O’Reilly

Teach/write/train
Careers
Press releases
Media coverage
Community partners
Affiliate program
Submit an RFP
Diversity
O’Reilly for marketers





Support

Contact us
Newsletters
Privacy policy


linkedin-logo
youtube-logo


International

Australia & New Zealand
Hong Kong & Taiwan
India
Indonesia
Japan





Download the O’Reilly App
Take O’Reilly with you and learn anywhere, anytime on your phone and tablet.






Watch on your big screen
View all O’Reilly videos, Superstream events, and Meet the Expert sessions on your home TV.






Do not sell my personal information






© 2024, O’Reilly Media, Inc. All trademarks and registered trademarks appearing on oreilly.com are the property of their respective owners.
We are a participant in the Amazon Services LLC Associates Program, an affiliate advertising program designed to provide a means for us to earn fees by linking to Amazon.com and affiliated sites.
Terms of service • Privacy policy • Editorial independence







Don’t leave empty-handed
Get Mark Richards’s Software Architecture Patterns ebook to better understand how to design components—and how they should interact.
It’s yours, free.
Get it now



Close






Check it out now on O’Reilly
Dive in for free with a 10-day trial of the O’Reilly learning platform—then explore all the other resources our members count on to build skills and solve problems every day.
Start your free trial
Become a member now



Close































3. Classification - Hands-On Machine Learning with Scikit-Learn, Keras, and TensorFlow, 2nd Edition [Book]






























Skip to main content













Sign In
Try Now




Teams

For business
For government
For higher ed


Individuals
Features

All features
Courses
Certifications
Interactive learning
Live events
Answers
Insights reporting


Blog
Content sponsorship



















Hands-On Machine Learning with Scikit-Learn, Keras, and TensorFlow, 2nd Edition by Aurélien Géron




Buy on Amazon







Get full access to Hands-On Machine Learning with Scikit-Learn, Keras, and TensorFlow, 2nd Edition and 60K+ other titles, with a free 10-day trial of O'Reilly.
There are also live events, courses curated by job role, and more.

Start your free trial










Chapter 3. Classification
In Chapter 1 I mentioned that the most common supervised learning tasks are regression (predicting values) and classification (predicting classes). In Chapter 2 we explored a regression task, predicting housing values, using various algorithms such as Linear Regression, Decision Trees, and Random Forests (which will be explained in further detail in later chapters). Now we will turn our attention to classification systems.

MNIST
In this chapter we will be using the MNIST dataset, which is a set of 70,000 small images of digits handwritten by high school students and employees of the US Census Bureau. Each image is labeled with the digit it represents. This set has been studied so much that it is often called the “hello world” of Machine Learning: whenever people come up with a new classification algorithm they are curious to see how it will perform on MNIST, and anyone who learns Machine Learning tackles this dataset sooner or later.
Scikit-Learn provides many helper functions to download popular datasets. MNIST is one of them. The following code fetches the MNIST dataset:1
>>> from sklearn.datasets import fetch_openml
>>> mnist = fetch_openml('mnist_784', version=1)
>>> mnist.keys()
dict_keys(['data', 'target', 'feature_names', 'DESCR', 'details',
           'categories', 'url'])
Datasets loaded by Scikit-Learn generally have a similar dictionary structure, including the following:


A DESCR key describing the dataset


A data key containing an array with one ...


Get Hands-On Machine Learning with Scikit-Learn, Keras, and TensorFlow, 2nd Edition now with the O’Reilly learning platform.
O’Reilly members experience books, live events, courses curated by job role, and more from O’Reilly and nearly 200 top publishers.

Start your free trial












About O’Reilly

Teach/write/train
Careers
Press releases
Media coverage
Community partners
Affiliate program
Submit an RFP
Diversity
O’Reilly for marketers





Support

Contact us
Newsletters
Privacy policy


linkedin-logo
youtube-logo


International

Australia & New Zealand
Hong Kong & Taiwan
India
Indonesia
Japan





Download the O’Reilly App
Take O’Reilly with you and learn anywhere, anytime on your phone and tablet.






Watch on your big screen
View all O’Reilly videos, Superstream events, and Meet the Expert sessions on your home TV.






Do not sell my personal information






© 2024, O’Reilly Media, Inc. All trademarks and registered trademarks appearing on oreilly.com are the property of their respective owners.
We are a participant in the Amazon Services LLC Associates Program, an affiliate advertising program designed to provide a means for us to earn fees by linking to Amazon.com and affiliated sites.
Terms of service • Privacy policy • Editorial independence







Don’t leave empty-handed
Get Mark Richards’s Software Architecture Patterns ebook to better understand how to design components—and how they should interact.
It’s yours, free.
Get it now



Close






Check it out now on O’Reilly
Dive in for free with a 10-day trial of the O’Reilly learning platform—then explore all the other resources our members count on to build skills and solve problems every day.
Start your free trial
Become a member now



Close































4. Training Models - Hands-On Machine Learning with Scikit-Learn, Keras, and TensorFlow, 2nd Edition [Book]






























Skip to main content













Sign In
Try Now




Teams

For business
For government
For higher ed


Individuals
Features

All features
Courses
Certifications
Interactive learning
Live events
Answers
Insights reporting


Blog
Content sponsorship



















Hands-On Machine Learning with Scikit-Learn, Keras, and TensorFlow, 2nd Edition by Aurélien Géron




Buy on Amazon







Get full access to Hands-On Machine Learning with Scikit-Learn, Keras, and TensorFlow, 2nd Edition and 60K+ other titles, with a free 10-day trial of O'Reilly.
There are also live events, courses curated by job role, and more.

Start your free trial










Chapter 4. Training Models
So far we have treated Machine Learning models and their training algorithms mostly like black boxes. If you went through some of the exercises in the previous chapters, you may have been surprised by how much you can get done without knowing anything about what’s under the hood: you optimized a regression system, you improved a digit image classifier, and you even built a spam classifier from scratch, all this without knowing how they actually work. Indeed, in many situations you don’t really need to know the implementation details.
However, having a good understanding of how things work can help you quickly home in on the appropriate model, the right training algorithm to use, and a good set of hyperparameters for your task. Understanding what’s under the hood will also help you debug issues and perform error analysis more efficiently. Lastly, most of the topics discussed in this chapter will be essential in understanding, building, and training neural networks (discussed in Part II of this book).
In this chapter we will start by looking at the Linear Regression model, one of the simplest models there is. We will discuss two very different ways to train it:


Using a direct “closed-form” equation that directly computes the model parameters that best fit the model to the training set (i.e., the model parameters that minimize the cost function over the training set).


Using an iterative optimization approach called Gradient Descent (GD) that gradually tweaks the model parameters to minimize the cost function over the training set, eventually converging to the same set of parameters as the first method. We will look at a few variants of Gradient Descent that we will use again and again when we study neural networks in Part II: Batch GD, Mini-batch GD, and Stochastic GD.


Next we will look at Polynomial Regression, a more complex model that can fit nonlinear datasets. Since this model has more parameters than Linear Regression, it is more prone to overfitting the training data, so we will look at how to detect whether or not this is the case using learning curves, and then we will look at several regularization techniques that can reduce the risk of overfitting the training set.
Finally, we will look at two more models that are commonly used for classification tasks: Logistic Regression and Softmax Regression.
Warning
There will be quite a few math equations in this chapter, using basic notions of linear algebra and calculus. To understand these equations, you will need to know what vectors and matrices are; how to transpose them, multiply them, and inverse them; and what partial derivatives are. If you are unfamiliar with these concepts, please go through the linear algebra and calculus introductory tutorials available as Jupyter notebooks in the online supplemental material. For those who are truly allergic to mathematics, you should still go through this chapter and simply skip the equations; hopefully, the text will be sufficient to help you understand most of the concepts.


Linear Regression
In Chapter 1 we looked at a simple regression model of life satisfaction: life_satisfaction = θ0 + θ1 × GDP_per_capita.
This model is just a linear function of the input feature GDP_per_capita. θ0 and θ1 are the model’s parameters.
More generally, a linear model makes a prediction by simply computing a weighted sum of the input features, plus a constant called the bias term (also called the intercept term), as shown in Equation 4-1.

Equation 4-1. Linear Regression model prediction


y ^
=
θ 0 
+
θ 1 
x 1 
+
θ 2 
x 2 
+
⋯
+
θ n 
x n 



In this equation:


ŷ is the predicted value.


n is the number of features.


xi is the ith feature value.


θj is the jth model parameter (including the bias term θ0 and the feature weights θ1, θ2, ⋯, θn).


This can be written much more concisely using a vectorized form, as shown in Equation 4-2.
Equation 4-2. Linear Regression model prediction (vectorized form)y^=hθ(x)=θ·x

In this equation:


θ is the model’s parameter vector, containing the bias term θ0 and the feature weights θ1 to θn.


x is the instance’s feature vector, containing x0 to xn, with x0 always equal to 1.


θ · x is the dot product of the vectors θ and x, which is of course equal to θ0x0 + θ1x1 + θ2x2 + ... + θnxn.


hθ is the hypothesis function, using the model parameters θ.


Note
In Machine Learning, vectors are often represented as column vectors, which are 2D arrays with a single column. If θ and x are column vectors, then the prediction is y^=θ⊺x, where θ⊺ is the transpose of θ (a row vector instead of a column vector) and θ⊺x is the matrix multiplication of θ⊺ and x. It is of course the same prediction, except that it is now represented as a single-cell matrix rather than a scalar value. In this book I will use this notation to avoid switching between dot products and matrix multiplications.

OK, that’s the Linear Regression model—but how do we train it? Well, recall that training a model means setting its parameters so that the model best fits the training set. For this purpose, we first need a measure of how well (or poorly) the model fits the training data. In Chapter 2 we saw that the most common performance measure of a regression model is the Root Mean Square Error (RMSE) (Equation 2-1). Therefore, to train a Linear Regression model, we need to find the value of θ that minimizes the RMSE. In practice, it is simpler to minimize the mean squared error (MSE) than the RMSE, and it leads to the same result (because the value that minimizes a function also minimizes its square root).1
The MSE of a Linear Regression hypothesis hθ on a training set X is calculated using Equation 4-3.
Equation 4-3. MSE cost function for a Linear Regression model

MSE

(
X
,
h θ 
)

=

1 m

∑ i=1 m 
(θ ⊺ x (i) -y (i) ) 2 



Most of these notations were presented in Chapter 2 (see “Notations”). The only difference is that we write hθ instead of just h to make it clear that the model is parametrized by the vector θ. To simplify notations, we will just write MSE(θ) instead of MSE(X, hθ).

The Normal Equation
To find the value of θ that minimizes the cost function, there is a closed-form solution—in other words, a mathematical equation that gives the result directly. This is called the Normal Equation (Equation 4-4).
Equation 4-4. Normal Equation

θ ^
=
(X ⊺ X) -1 
 
X ⊺ 
 
y



In this equation:


θ^ is the value of θ that minimizes the cost function.


y is the vector of target values containing y(1) to y(m).


Let’s generate some linear-looking data to test this equation on (Figure 4-1):
import numpy as np

X = 2 * np.random.rand(100, 1)
y = 4 + 3 * X + np.random.randn(100, 1)


Figure 4-1. Randomly generated linear dataset

Now let’s compute θ^ using the Normal Equation. We will use the inv() function from NumPy’s linear algebra module (np.linalg) to compute the inverse of a matrix, and the dot() method for matrix multiplication:
X_b = np.c_[np.ones((100, 1)), X]  # add x0 = 1 to each instance
theta_best = np.linalg.inv(X_b.T.dot(X_b)).dot(X_b.T).dot(y)
The function that we used to generate the data is y = 4 + 3x1 + Gaussian noise. Let’s see what the equation found:
>>> theta_best
array([[4.21509616],
       [2.77011339]])
We would have hoped for θ0 = 4 and θ1 = 3 instead of θ0 = 4.215 and θ1 = 2.770. Close enough, but the noise made it impossible to recover the exact parameters of the original function.
Now we can make predictions using θ^:
>>> X_new = np.array([[0], [2]])
>>> X_new_b = np.c_[np.ones((2, 1)), X_new] # add x0 = 1 to each instance
>>> y_predict = X_new_b.dot(theta_best)
>>> y_predict
array([[4.21509616],
       [9.75532293]])
Let’s plot this model’s predictions (Figure 4-2):
plt.plot(X_new, y_predict, "r-")
plt.plot(X, y, "b.")
plt.axis([0, 2, 0, 15])
plt.show()


Figure 4-2. Linear Regression model predictions

Performing Linear Regression using Scikit-Learn is simple:2
>>> from sklearn.linear_model import LinearRegression
>>> lin_reg = LinearRegression()
>>> lin_reg.fit(X, y)
>>> lin_reg.intercept_, lin_reg.coef_
(array([4.21509616]), array([[2.77011339]]))
>>> lin_reg.predict(X_new)
array([[4.21509616],
       [9.75532293]])
The LinearRegression class is based on the scipy.linalg.lstsq() function (the name stands for “least squares”), which you could call directly:
>>> theta_best_svd, residuals, rank, s = np.linalg.lstsq(X_b, y, rcond=1e-6)
>>> theta_best_svd
array([[4.21509616],
       [2.77011339]])
This function computes θ^=X+y, where X+ is the pseudoinverse of X (specifically, the Moore-Penrose inverse). You can use np.linalg.pinv() to compute the pseudoinverse directly:
>>> np.linalg.pinv(X_b).dot(y)
array([[4.21509616],
       [2.77011339]])
The pseudoinverse itself is computed using a standard matrix factorization technique called Singular Value Decomposition (SVD) that can decompose the training set matrix X into the matrix multiplication of three matrices U Σ V⊺ (see numpy.linalg.svd()). The pseudoinverse is computed as X+=VΣ+U⊺. To compute the matrix Σ+, the algorithm takes Σ and sets to zero all values smaller than a tiny threshold value, then it replaces all the nonzero values with their inverse, and finally it transposes the resulting matrix. This approach is more efficient than computing the Normal Equation, plus it handles edge cases nicely: indeed, the Normal Equation may not work if the matrix X⊺X is not invertible (i.e., singular), such as if m < n or if some features are redundant, but the pseudoinverse is always defined.


Computational Complexity
The Normal Equation computes the inverse of X⊺ X, which is an (n + 1) × (n + 1) matrix (where n is the number of features). The computational complexity of inverting such a matrix is typically about O(n2.4) to O(n3), depending on the implementation. In other words, if you double the number of features, you multiply the computation time by roughly 22.4 = 5.3 to 23 = 8.
The SVD approach used by Scikit-Learn’s LinearRegression class is about O(n2). If you double the number of features, you multiply the computation time by roughly 4.
Warning
Both the Normal Equation and the SVD approach get very slow when the number of features grows large (e.g., 100,000). On the positive side, both are linear with regard to the number of instances in the training set (they are O(m)), so they handle large training sets efficiently, provided they can fit in memory.

Also, once you have trained your Linear Regression model (using the Normal Equation or any other algorithm), predictions are very fast: the computational complexity is linear with regard to both the number of instances you want to make predictions on and the number of features. In other words, making predictions on twice as many instances (or twice as many features) will take roughly twice as much time.
Now we will look at a very different way to train a Linear Regression model, which is better suited for cases where there are a large number of features or too many training instances to fit in memory.



Gradient Descent
Gradient Descent is a generic optimization algorithm capable of finding optimal solutions to a wide range of problems. The general idea of Gradient Descent is to tweak parameters iteratively in order to minimize a cost function.
Suppose you are lost in the mountains in a dense fog, and you can only feel the slope of the ground below your feet. A good strategy to get to the bottom of the valley quickly is to go downhill in the direction of the steepest slope. This is exactly what Gradient Descent does: it measures the local gradient of the error function with regard to the parameter vector θ, and it goes in the direction of descending gradient. Once the gradient is zero, you have reached a minimum!
Concretely, you start by filling θ with random values (this is called random initialization). Then you improve it gradually, taking one baby step at a time, each step attempting to decrease the cost function (e.g., the MSE), until the algorithm converges to a minimum (see Figure 4-3).


Figure 4-3. In this depiction of Gradient Descent, the model parameters are initialized randomly and get tweaked repeatedly to minimize the cost function; the learning step size is proportional to the slope of the cost function, so the steps gradually get smaller as the parameters approach the minimum

An important parameter in Gradient Descent is the size of the steps, determined by the learning rate hyperparameter. If the learning rate is too small, then the algorithm will have to go through many iterations to converge, which will take a long time (see Figure 4-4).


Figure 4-4. The learning rate is too small

On the other hand, if the learning rate is too high, you might jump across the valley and end up on the other side, possibly even higher up than you were before. This might make the algorithm diverge, with larger and larger values, failing to find a good solution (see Figure 4-5).


Figure 4-5. The learning rate is too large

Finally, not all cost functions look like nice, regular bowls. There may be holes, ridges, plateaus, and all sorts of irregular terrains, making convergence to the minimum difficult. Figure 4-6 shows the two main challenges with Gradient Descent. If the random initialization starts the algorithm on the left, then it will converge to a local minimum, which is not as good as the global minimum. If it starts on the right, then it will take a very long time to cross the plateau. And if you stop too early, you will never reach the global minimum.


Figure 4-6. Gradient Descent pitfalls

Fortunately, the MSE cost function for a Linear Regression model happens to be a convex function, which means that if you pick any two points on the curve, the line segment joining them never crosses the curve. This implies that there are no local minima, just one global minimum. It is also a continuous function with a slope that never changes abruptly.3 These two facts have a great consequence: Gradient Descent is guaranteed to approach arbitrarily close the global minimum (if you wait long enough and if the learning rate is not too high).
In fact, the cost function has the shape of a bowl, but it can be an elongated bowl if the features have very different scales. Figure 4-7 shows Gradient Descent on a training set where features 1 and 2 have the same scale (on the left), and on a training set where feature 1 has much smaller values than feature 2 (on the right).4


Figure 4-7. Gradient Descent with (left) and without (right) feature scaling

As you can see, on the left the Gradient Descent algorithm goes straight toward the minimum, thereby reaching it quickly, whereas on the right it first goes in a direction almost orthogonal to the direction of the global minimum, and it ends with a long march down an almost flat valley. It will eventually reach the minimum, but it will take a long time.
Warning
When using Gradient Descent, you should ensure that all features have a similar scale (e.g., using Scikit-Learn’s StandardScaler class), or else it will take much longer to converge.

This diagram also illustrates the fact that training a model means searching for a combination of model parameters that minimizes a cost function (over the training set). It is a search in the model’s parameter space: the more parameters a model has, the more dimensions this space has, and the harder the search is: searching for a needle in a 300-dimensional haystack is much trickier than in 3 dimensions. Fortunately, since the cost function is convex in the case of Linear Regression, the needle is simply at the bottom of the bowl.

Batch Gradient Descent
To implement Gradient Descent, you need to compute the gradient of the cost function with regard to each model parameter θj. In other words, you need to calculate how much the cost function will change if you change θj just a little bit. This is called a partial derivative. It is like asking “What is the slope of the mountain under my feet if I face east?” and then asking the same question facing north (and so on for all other dimensions, if you can imagine a universe with more than three dimensions). Equation 4-5 computes the partial derivative of the cost function with regard to parameter θj, noted ∂ MSE(θ) / ∂θj.
Equation 4-5. Partial derivatives of the cost function


∂ ∂θ j 

MSE

(
θ
)

=

2 m

∑ i=1 m 

(
θ ⊺ 
x (i) 
-
y (i) 
)


x j (i) 



Instead of computing these partial derivatives individually, you can use Equation 4-6 to compute them all in one go. The gradient vector, noted ∇θMSE(θ), contains all the partial derivatives of the cost function (one for each model parameter).
Equation 4-6. Gradient vector of the cost function

∇ θ 

MSE

(
θ
)

=





∂ ∂θ 0 
MSE

(
θ
)







∂ ∂θ 1 
MSE

(
θ
)






⋮





∂ ∂θ n 
MSE

(
θ
)






=

2 m

X ⊺ 

(
X
θ
-
y
)




Warning
Notice that this formula involves calculations over the full training set X, at each Gradient Descent step! This is why the algorithm is called Batch Gradient Descent: it uses the whole batch of training data at every step (actually, Full Gradient Descent would probably be a better name). As a result it is terribly slow on very large training sets (but we will see much faster Gradient Descent algorithms shortly). However, Gradient Descent scales well with the number of features; training a Linear Regression model when there are hundreds of thousands of features is much faster using Gradient Descent than using the Normal Equation or SVD decomposition.

Once you have the gradient vector, which points uphill, just go in the opposite direction to go downhill. This means subtracting ∇θMSE(θ) from θ. This is where the learning rate η comes into play:5 multiply the gradient vector by η to determine the size of the downhill step (Equation 4-7).
Equation 4-7. Gradient Descent stepθ(next step)=θ-η∇θ MSE(θ)
Let’s look at a quick implementation of this algorithm:
eta = 0.1  # learning rate
n_iterations = 1000
m = 100

theta = np.random.randn(2,1)  # random initialization

for iteration in range(n_iterations):
    gradients = 2/m * X_b.T.dot(X_b.dot(theta) - y)
    theta = theta - eta * gradients
That wasn’t too hard! Let’s look at the resulting theta:
>>> theta
array([[4.21509616],
       [2.77011339]])
Hey, that’s exactly what the Normal Equation found! Gradient Descent worked perfectly. But what if you had used a different learning rate eta? Figure 4-8 shows the first 10 steps of Gradient Descent using three different learning rates (the dashed line represents the starting point).


Figure 4-8. Gradient Descent with various learning rates

On the left, the learning rate is too low: the algorithm will eventually reach the solution, but it will take a long time. In the middle, the learning rate looks pretty good: in just a few iterations, it has already converged to the solution. On the right, the learning rate is too high: the algorithm diverges, jumping all over the place and actually getting further and further away from the solution at every step.
To find a good learning rate, you can use grid search (see Chapter 2). However, you may want to limit the number of iterations so that grid search can eliminate models that take too long to converge.
You may wonder how to set the number of iterations. If it is too low, you will still be far away from the optimal solution when the algorithm stops; but if it is too high, you will waste time while the model parameters do not change anymore. A simple solution is to set a very large number of iterations but to interrupt the algorithm when the gradient vector becomes tiny—that is, when its norm becomes smaller than a tiny number ϵ (called the tolerance)—because this happens when Gradient Descent has (almost) reached the minimum.

Convergence Rate
When the cost function is convex and its slope does not change abruptly (as is the case for the MSE cost function), Batch Gradient Descent with a fixed learning rate will eventually converge to the optimal solution, but you may have to wait a while: it can take O(1/ϵ) iterations to reach the optimum within a range of ϵ, depending on the shape of the cost function. If you divide the tolerance by 10 to have a more precise solution, then the algorithm may have to run about 10 times longer.



Stochastic Gradient Descent
The main problem with Batch Gradient Descent is the fact that it uses the whole training set to compute the gradients at every step, which makes it very slow when the training set is large. At the opposite extreme, Stochastic Gradient Descent picks a random instance in the training set at every step and computes the gradients based only on that single instance. Obviously, working on a single instance at a time makes the algorithm much faster because it has very little data to manipulate at every iteration. It also makes it possible to train on huge training sets, since only one instance needs to be in memory at each iteration (Stochastic GD can be implemented as an out-of-core algorithm; see Chapter 1).
On the other hand, due to its stochastic (i.e., random) nature, this algorithm is much less regular than Batch Gradient Descent: instead of gently decreasing until it reaches the minimum, the cost function will bounce up and down, decreasing only on average. Over time it will end up very close to the minimum, but once it gets there it will continue to bounce around, never settling down (see Figure 4-9). So once the algorithm stops, the final parameter values are good, but not optimal.


Figure 4-9. With Stochastic Gradient Descent, each training step is much faster but also much more stochastic than when using Batch Gradient Descent

When the cost function is very irregular (as in Figure 4-6), this can actually help the algorithm jump out of local minima, so Stochastic Gradient Descent has a better chance of finding the global minimum than Batch Gradient Descent does.
Therefore, randomness is good to escape from local optima, but bad because it means that the algorithm can never settle at the minimum. One solution to this dilemma is to gradually reduce the learning rate. The steps start out large (which helps make quick progress and escape local minima), then get smaller and smaller, allowing the algorithm to settle at the global minimum. This process is akin to simulated annealing, an algorithm inspired from the process in metallurgy of annealing, where molten metal is slowly cooled down. The function that determines the learning rate at each iteration is called the learning schedule. If the learning rate is reduced too quickly, you may get stuck in a local minimum, or even end up frozen halfway to the minimum. If the learning rate is reduced too slowly, you may jump around the minimum for a long time and end up with a suboptimal solution if you halt training too early.
This code implements Stochastic Gradient Descent using a simple learning schedule:
n_epochs = 50
t0, t1 = 5, 50  # learning schedule hyperparameters

def learning_schedule(t):
    return t0 / (t + t1)

theta = np.random.randn(2,1)  # random initialization

for epoch in range(n_epochs):
    for i in range(m):
        random_index = np.random.randint(m)
        xi = X_b[random_index:random_index+1]
        yi = y[random_index:random_index+1]
        gradients = 2 * xi.T.dot(xi.dot(theta) - yi)
        eta = learning_schedule(epoch * m + i)
        theta = theta - eta * gradients
By convention we iterate by rounds of m iterations; each round is called an epoch. While the Batch Gradient Descent code iterated 1,000 times through the whole training set, this code goes through the training set only 50 times and reaches a pretty good solution:
>>> theta
array([[4.21076011],
       [2.74856079]])
Figure 4-10 shows the first 20 steps of training (notice how irregular the steps are).


Figure 4-10. The first 20 steps of Stochastic Gradient Descent

Note that since instances are picked randomly, some instances may be picked several times per epoch, while others may not be picked at all. If you want to be sure that the algorithm goes through every instance at each epoch, another approach is to shuffle the training set (making sure to shuffle the input features and the labels jointly), then go through it instance by instance, then shuffle it again, and so on. However, this approach generally converges more slowly.
Warning
When using Stochastic Gradient Descent, the training instances must be independent and identically distributed (IID) to ensure that the parameters get pulled toward the global optimum, on average. A simple way to ensure this is to shuffle the instances during training (e.g., pick each instance randomly, or shuffle the training set at the beginning of each epoch). If you do not shuffle the instances—for example, if the instances are sorted by label—then SGD will start by optimizing for one label, then the next, and so on, and it will not settle close to the global minimum.

To perform Linear Regression using Stochastic GD with Scikit-Learn, you can use the SGDRegressor class, which defaults to optimizing the squared error cost function. The following code runs for maximum 1,000 epochs or until the loss drops by less than 0.001 during one epoch (max_iter=1000, tol=1e-3). It starts with a learning rate of 0.1 (eta0=0.1), using the default learning schedule (different from the preceding one). Lastly, it does not use any regularization (penalty=None; more details on this shortly):
from sklearn.linear_model import SGDRegressor
sgd_reg = SGDRegressor(max_iter=1000, tol=1e-3, penalty=None, eta0=0.1)
sgd_reg.fit(X, y.ravel())
Once again, you find a solution quite close to the one returned by the Normal Equation:
>>> sgd_reg.intercept_, sgd_reg.coef_
(array([4.24365286]), array([2.8250878]))


Mini-batch Gradient Descent
The last Gradient Descent algorithm we will look at is called Mini-batch Gradient Descent. It is simple to understand once you know Batch and Stochastic Gradient Descent: at each step, instead of computing the gradients based on the full training set (as in Batch GD) or based on just one instance (as in Stochastic GD), Mini-batch GD computes the gradients on small random sets of instances called mini-batches. The main advantage of Mini-batch GD over Stochastic GD is that you can get a performance boost from hardware optimization of matrix operations, especially when using GPUs.
The algorithm’s progress in parameter space is less erratic than with Stochastic GD, especially with fairly large mini-batches. As a result, Mini-batch GD will end up walking around a bit closer to the minimum than Stochastic GD—but it may be harder for it to escape from local minima (in the case of problems that suffer from local minima, unlike Linear Regression). Figure 4-11 shows the paths taken by the three Gradient Descent algorithms in parameter space during training. They all end up near the minimum, but Batch GD’s path actually stops at the minimum, while both Stochastic GD and Mini-batch GD continue to walk around. However, don’t forget that Batch GD takes a lot of time to take each step, and Stochastic GD and Mini-batch GD would also reach the minimum if you used a good learning schedule.


Figure 4-11. Gradient Descent paths in parameter space

Let’s compare the algorithms we’ve discussed so far for Linear Regression6 (recall that m is the number of training instances and n is the number of features); see Table 4-1.

Table 4-1. Comparison of algorithms for Linear Regression


Algorithm
Large m
Out-of-core support
Large n
Hyperparams
Scaling required
Scikit-Learn




Normal Equation
Fast
No
Slow
0
No
N/A


SVD
Fast
No
Slow
0
No
LinearRegression


Batch GD
Slow
No
Fast
2
Yes
SGDRegressor


Stochastic GD
Fast
Yes
Fast
≥2
Yes
SGDRegressor


Mini-batch GD
Fast
Yes
Fast
≥2
Yes
SGDRegressor



Note
There is almost no difference after training: all these algorithms end up with very similar models and make predictions in exactly the same way.




Polynomial Regression
What if your data is more complex than a straight line? Surprisingly, you can use a linear model to fit nonlinear data. A simple way to do this is to add powers of each feature as new features, then train a linear model on this extended set of features. This technique is called Polynomial Regression.
Let’s look at an example. First, let’s generate some nonlinear data, based on a simple quadratic equation7 (plus some noise; see Figure 4-12):
m = 100
X = 6 * np.random.rand(m, 1) - 3
y = 0.5 * X**2 + X + 2 + np.random.randn(m, 1)


Figure 4-12. Generated nonlinear and noisy dataset

Clearly, a straight line will never fit this data properly. So let’s use Scikit-Learn’s PolynomialFeatures class to transform our training data, adding the square (second-degree polynomial) of each feature in the training set as a new feature (in this case there is just one feature):
>>> from sklearn.preprocessing import PolynomialFeatures
>>> poly_features = PolynomialFeatures(degree=2, include_bias=False)
>>> X_poly = poly_features.fit_transform(X)
>>> X[0]
array([-0.75275929])
>>> X_poly[0]
array([-0.75275929, 0.56664654])
X_poly now contains the original feature of X plus the square of this feature. Now you can fit a LinearRegression model to this extended training data (Figure 4-13):
>>> lin_reg = LinearRegression()
>>> lin_reg.fit(X_poly, y)
>>> lin_reg.intercept_, lin_reg.coef_
(array([1.78134581]), array([[0.93366893, 0.56456263]]))


Figure 4-13. Polynomial Regression model predictions

Not bad: the model estimates 


y ^
=
0.56
x 1  2 
+
0.93
x 1 
+
1.78

 when in fact the original function was 


y
=
0.5
x 1  2 
+
1.0
x 1 
+
2.0
+
Gaussian noise

.
Note that when there are multiple features, Polynomial Regression is capable of finding relationships between features (which is something a plain Linear Regression model cannot do). This is made possible by the fact that PolynomialFeatures also adds all combinations of features up to the given degree. For example, if there were two features a and b, PolynomialFeatures with degree=3 would not only add the features a2, a3, b2, and b3, but also the combinations ab, a2b, and ab2.
Warning
PolynomialFeatures(degree=d) transforms an array containing n features into an array containing (n + d)! / d!n! features, where n! is the factorial of n, equal to 1 × 2 × 3 × ⋯ × n. Beware of the combinatorial explosion of the number of features!



Learning Curves
If you perform high-degree Polynomial Regression, you will likely fit the training data much better than with plain Linear Regression. For example, Figure 4-14 applies a 300-degree polynomial model to the preceding training data, and compares the result with a pure linear model and a quadratic model (second-degree polynomial). Notice how the 300-degree polynomial model wiggles around to get as close as possible to the training instances.


Figure 4-14. High-degree Polynomial Regression

This high-degree Polynomial Regression model is severely overfitting the training data, while the linear model is underfitting it. The model that will generalize best in this case is the quadratic model, which makes sense because the data was generated using a quadratic model. But in general you won’t know what function generated the data, so how can you decide how complex your model should be? How can you tell that your model is overfitting or underfitting the data?
In Chapter 2 you used cross-validation to get an estimate of a model’s generalization performance. If a model performs well on the training data but generalizes poorly according to the cross-validation metrics, then your model is overfitting. If it performs poorly on both, then it is underfitting. This is one way to tell when a model is too simple or too complex.
Another way to tell is to look at the learning curves: these are plots of the model’s performance on the training set and the validation set as a function of the training set size (or the training iteration). To generate the plots, train the model several times on different sized subsets of the training set. The following code defines a function that, given some training data, plots the learning curves of a model:
from sklearn.metrics import mean_squared_error
from sklearn.model_selection import train_test_split

def plot_learning_curves(model, X, y):
    X_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.2)
    train_errors, val_errors = [], []
    for m in range(1, len(X_train)):
        model.fit(X_train[:m], y_train[:m])
        y_train_predict = model.predict(X_train[:m])
        y_val_predict = model.predict(X_val)
        train_errors.append(mean_squared_error(y_train[:m], y_train_predict))
        val_errors.append(mean_squared_error(y_val, y_val_predict))
    plt.plot(np.sqrt(train_errors), "r-+", linewidth=2, label="train")
    plt.plot(np.sqrt(val_errors), "b-", linewidth=3, label="val")
Let’s look at the learning curves of the plain Linear Regression model (a straight line; see Figure 4-15):
lin_reg = LinearRegression()
plot_learning_curves(lin_reg, X, y)


Figure 4-15. Learning curves

This model that’s underfitting deserves a bit of explanation. First, let’s look at the performance on the training data: when there are just one or two instances in the training set, the model can fit them perfectly, which is why the curve starts at zero. But as new instances are added to the training set, it becomes impossible for the model to fit the training data perfectly, both because the data is noisy and because it is not linear at all. So the error on the training data goes up until it reaches a plateau, at which point adding new instances to the training set doesn’t make the average error much better or worse. Now let’s look at the performance of the model on the validation data. When the model is trained on very few training instances, it is incapable of generalizing properly, which is why the validation error is initially quite big. Then, as the model is shown more training examples, it learns, and thus the validation error slowly goes down. However, once again a straight line cannot do a good job modeling the data, so the error ends up at a plateau, very close to the other curve.
These learning curves are typical of a model that’s underfitting. Both curves have reached a plateau; they are close and fairly high.
Tip
If your model is underfitting the training data, adding more training examples will not help. You need to use a more complex model or come up with better features.

Now let’s look at the learning curves of a 10th-degree polynomial model on the same data (Figure 4-16):
from sklearn.pipeline import Pipeline

polynomial_regression = Pipeline([
        ("poly_features", PolynomialFeatures(degree=10, include_bias=False)),
        ("lin_reg", LinearRegression()),
    ])

plot_learning_curves(polynomial_regression, X, y)


Figure 4-16. Learning curves for the 10th-degree polynomial model

These learning curves look a bit like the previous ones, but there are two very important differences:


The error on the training data is much lower than with the Linear Regression model.


There is a gap between the curves. This means that the model performs significantly better on the training data than on the validation data, which is the hallmark of an overfitting model. If you used a much larger training set, however, the two curves would continue to get closer.


Tip
One way to improve an overfitting model is to feed it more training data until the validation error reaches the training error.


The Bias/Variance Trade-off
An important theoretical result of statistics and Machine Learning is the fact that a model’s generalization error can be expressed as the sum of three very different errors:

Bias

This part of the generalization error is due to wrong assumptions, such as assuming that the data is linear when it is actually quadratic. A high-bias model is most likely to underfit the training data.8

Variance

This part is due to the model’s excessive sensitivity to small variations in the training data. A model with many degrees of freedom (such as a high-degree polynomial model) is likely to have high variance and thus overfit the training data.

Irreducible error

This part is due to the noisiness of the data itself. The only way to reduce this part of the error is to clean up the data (e.g., fix the data sources, such as broken sensors, or detect and remove outliers).


Increasing a model’s complexity will typically increase its variance and reduce its bias. Conversely, reducing a model’s complexity increases its bias and reduces its variance. This is why it is called a trade-off.



Regularized Linear Models
As we saw in Chapters 1 and 2, a good way to reduce overfitting is to regularize the model (i.e., to constrain it): the fewer degrees of freedom it has, the harder it will be for it to overfit the data. A simple way to regularize a polynomial model is to reduce the number of polynomial degrees.
For a linear model, regularization is typically achieved by constraining the weights of the model. We will now look at Ridge Regression, Lasso Regression, and Elastic Net, which implement three different ways to constrain the weights.

Ridge Regression
Ridge Regression (also called Tikhonov regularization) is a regularized version of Linear Regression: a regularization term equal to α∑i=1nθi2 is added to the cost function. This forces the learning algorithm to not only fit the data but also keep the model weights as small as possible. Note that the regularization term should only be added to the cost function during training. Once the model is trained, you want to use the unregularized performance measure to evaluate the model’s performance.
Note
It is quite common for the cost function used during training to be different from the performance measure used for testing. Apart from regularization, another reason they might be different is that a good training cost function should have optimization-friendly derivatives, while the performance measure used for testing should be as close as possible to the final objective. For example, classifiers are often trained using a cost function such as the log loss (discussed in a moment) but evaluated using precision/recall.

The hyperparameter α controls how much you want to regularize the model. If α = 0, then Ridge Regression is just Linear Regression. If α is very large, then all weights end up very close to zero and the result is a flat line going through the data’s mean. Equation 4-8 presents the Ridge Regression cost function.9
Equation 4-8. Ridge Regression cost functionJ(θ)=MSE(θ)+α12∑i=1nθi2
Note that the bias term θ0 is not regularized (the sum starts at i = 1, not 0). If we define w as the vector of feature weights (θ1 to θn), then the regularization term is equal to ½(∥ w ∥2)2, where ∥ w ∥2 represents the ℓ2 norm of the weight vector.10 For Gradient Descent, just add αw to the MSE gradient vector (Equation 4-6).
Warning
It is important to scale the data (e.g., using a StandardScaler) before performing Ridge Regression, as it is sensitive to the scale of the input features. This is true of most regularized models.

Figure 4-17 shows several Ridge models trained on some linear data using different α values. On the left, plain Ridge models are used, leading to linear predictions. On the right, the data is first expanded using PolynomialFeatures(degree=10), then it is scaled using a StandardScaler, and finally the Ridge models are applied to the resulting features: this is Polynomial Regression with Ridge regularization. Note how increasing α leads to flatter (i.e., less extreme, more reasonable) predictions, thus reducing the model’s variance but increasing its bias.


Figure 4-17. A linear model (left) and a polynomial model (right), both with various levels of Ridge regularization

As with Linear Regression, we can perform Ridge Regression either by computing a closed-form equation or by performing Gradient Descent. The pros and cons are the same. Equation 4-9 shows the closed-form solution, where A is the (n + 1) × (n + 1) identity matrix,11 except with a 0 in the top-left cell, corresponding to the bias term.
Equation 4-9. Ridge Regression closed-form solution

θ ^
=
(X ⊺ X+αA) -1 
 
X ⊺ 
 
y



Here is how to perform Ridge Regression with Scikit-Learn using a closed-form solution (a variant of Equation 4-9 that uses a matrix factorization technique by André-Louis Cholesky):
>>> from sklearn.linear_model import Ridge
>>> ridge_reg = Ridge(alpha=1, solver="cholesky")
>>> ridge_reg.fit(X, y)
>>> ridge_reg.predict([[1.5]])
array([[1.55071465]])
And using Stochastic Gradient Descent:12
>>> sgd_reg = SGDRegressor(penalty="l2")
>>> sgd_reg.fit(X, y.ravel())
>>> sgd_reg.predict([[1.5]])
array([1.47012588])
The penalty hyperparameter sets the type of regularization term to use. Specifying "l2" indicates that you want SGD to add a regularization term to the cost function equal to half the square of the ℓ2 norm of the weight vector: this is simply Ridge Regression.


Lasso Regression
Least Absolute Shrinkage and Selection Operator Regression (usually simply called Lasso Regression) is another regularized version of Linear Regression: just like Ridge Regression, it adds a regularization term to the cost function, but it uses the ℓ1 norm of the weight vector instead of half the square of the ℓ2 norm (see Equation 4-10).
Equation 4-10. Lasso Regression cost functionJ(θ)=MSE(θ)+α∑i=1nθi
Figure 4-18 shows the same thing as Figure 4-17 but replaces Ridge models with Lasso models and uses smaller α values.


Figure 4-18. A linear model (left) and a polynomial model (right), both using various levels of Lasso regularization

An important characteristic of Lasso Regression is that it tends to eliminate the weights of the least important features (i.e., set them to zero). For example, the dashed line in the righthand plot in Figure 4-18 (with α = 10-7) looks roughly cubic: all the weights for the high-degree polynomial features are equal to zero. In other words, Lasso Regression automatically performs feature selection and outputs a sparse model (i.e., with few nonzero feature weights).
You can get a sense of why this is the case by looking at Figure 4-19: the axes represent two model parameters, and the background contours represent different loss functions. In the top-left plot, the contours represent the ℓ1 loss (|θ1| + |θ2|), which drops linearly as you get closer to any axis. For example, if you initialize the model parameters to θ1 = 2 and θ2 = 0.5, running Gradient Descent will decrement both parameters equally (as represented by the dashed yellow line); therefore θ2 will reach 0 first (since it was closer to 0 to begin with). After that, Gradient Descent will roll down the gutter until it reaches θ1 = 0 (with a bit of bouncing around, since the gradients of ℓ1 never get close to 0: they are either –1 or 1 for each parameter). In the top-right plot, the contours represent Lasso’s cost function (i.e., an MSE cost function plus an ℓ1 loss). The small white circles show the path that Gradient Descent takes to optimize some model parameters that were initialized around θ1 = 0.25 and θ2 = –1: notice once again how the path quickly reaches θ2 = 0, then rolls down the gutter and ends up bouncing around the global optimum (represented by the red square). If we increased α, the global optimum would move left along the dashed yellow line, while if we decreased α, the global optimum would move right (in this example, the optimal parameters for the unregularized MSE are θ1 = 2 and θ2 = 0.5).


Figure 4-19. Lasso versus Ridge regularization

The two bottom plots show the same thing but with an ℓ2 penalty instead. In the bottom-left plot, you can see that the ℓ2 loss decreases with the distance to the origin, so Gradient Descent just takes a straight path toward that point. In the bottom-right plot, the contours represent Ridge Regression’s cost function (i.e., an MSE cost function plus an ℓ2 loss). There are two main differences with Lasso. First, the gradients get smaller as the parameters approach the global optimum, so Gradient Descent naturally slows down, which helps convergence (as there is no bouncing around). Second, the optimal parameters (represented by the red square) get closer and closer to the origin when you increase α, but they never get eliminated entirely.
Tip
To avoid Gradient Descent from bouncing around the optimum at the end when using Lasso, you need to gradually reduce the learning rate during training (it will still bounce around the optimum, but the steps will get smaller and smaller, so it will converge).

The Lasso cost function is not differentiable at θi = 0 (for i = 1, 2, ⋯, n), but Gradient Descent still works fine if you use a subgradient vector g13 instead when any θi = 0. Equation 4-11 shows a subgradient vector equation you can use for Gradient Descent with the Lasso cost function.
Equation 4-11. Lasso Regression subgradient vectorg(θ,J)=∇θ MSE(θ)+αsign(θ1)sign(θ2)⋮sign(θn)  where sign(θi)=-1if θi<00if θi=0+1if θi>0
Here is a small Scikit-Learn example using the Lasso class:
>>> from sklearn.linear_model import Lasso
>>> lasso_reg = Lasso(alpha=0.1)
>>> lasso_reg.fit(X, y)
>>> lasso_reg.predict([[1.5]])
array([1.53788174])
Note that you could instead use SGDRegressor(penalty="l1").


Elastic Net
Elastic Net is a middle ground between Ridge Regression and Lasso Regression. The regularization term is a simple mix of both Ridge and Lasso’s regularization terms, and you can control the mix ratio r. When r = 0, Elastic Net is equivalent to Ridge Regression, and when r = 1, it is equivalent to Lasso Regression (see Equation 4-12).
Equation 4-12. Elastic Net cost functionJ(θ)=MSE(θ)+rα∑i=1nθi+1-r2α∑i=1nθi2
So when should you use plain Linear Regression (i.e., without any regularization), Ridge, Lasso, or Elastic Net? It is almost always preferable to have at least a little bit of regularization, so generally you should avoid plain Linear Regression. Ridge is a good default, but if you suspect that only a few features are useful, you should prefer Lasso or Elastic Net because they tend to reduce the useless features’ weights down to zero, as we have discussed. In general, Elastic Net is preferred over Lasso because Lasso may behave erratically when the number of features is greater than the number of training instances or when several features are strongly correlated.
Here is a short example that uses Scikit-Learn’s ElasticNet (l1_ratio corresponds to the mix ratio r):
>>> from sklearn.linear_model import ElasticNet
>>> elastic_net = ElasticNet(alpha=0.1, l1_ratio=0.5)
>>> elastic_net.fit(X, y)
>>> elastic_net.predict([[1.5]])
array([1.54333232])


Early Stopping
A very different way to regularize iterative learning algorithms such as Gradient Descent is to stop training as soon as the validation error reaches a minimum. This is called early stopping. Figure 4-20 shows a complex model (in this case, a high-degree Polynomial Regression model) being trained with Batch Gradient Descent. As the epochs go by the algorithm learns, and its prediction error (RMSE) on the training set goes down, along with its prediction error on the validation set. After a while though, the validation error stops decreasing and starts to go back up. This indicates that the model has started to overfit the training data. With early stopping you just stop training as soon as the validation error reaches the minimum. It is such a simple and efficient regularization technique that Geoffrey Hinton called it a “beautiful free lunch.”


Figure 4-20. Early stopping regularization

Tip
With Stochastic and Mini-batch Gradient Descent, the curves are not so smooth, and it may be hard to know whether you have reached the minimum or not. One solution is to stop only after the validation error has been above the minimum for some time (when you are confident that the model will not do any better), then roll back the model parameters to the point where the validation error was at a minimum.

Here is a basic implementation of early stopping:
from copy import deepcopy

# prepare the data
poly_scaler = Pipeline([
        ("poly_features", PolynomialFeatures(degree=90, include_bias=False)),
        ("std_scaler", StandardScaler())
    ])
X_train_poly_scaled = poly_scaler.fit_transform(X_train)
X_val_poly_scaled = poly_scaler.transform(X_val)

sgd_reg = SGDRegressor(max_iter=1, tol=-np.infty, warm_start=True,
                       penalty=None, learning_rate="constant", eta0=0.0005)

minimum_val_error = float("inf")
best_epoch = None
best_model = None
for epoch in range(1000):
    sgd_reg.fit(X_train_poly_scaled, y_train)  # continues where it left off
    y_val_predict = sgd_reg.predict(X_val_poly_scaled)
    val_error = mean_squared_error(y_val, y_val_predict)
    if val_error < minimum_val_error:
        minimum_val_error = val_error
        best_epoch = epoch
        best_model = deepcopy(sgd_reg)
Note that with warm_start=True, when the fit() method is called it continues training where it left off, instead of restarting from scratch.



Logistic Regression
As we discussed in Chapter 1, some regression algorithms can be used for classification (and vice versa). Logistic Regression (also called Logit Regression) is commonly used to estimate the probability that an instance belongs to a particular class (e.g., what is the probability that this email is spam?). If the estimated probability is greater than 50%, then the model predicts that the instance belongs to that class (called the positive class, labeled “1”), and otherwise it predicts that it does not (i.e., it belongs to the negative class, labeled “0”). This makes it a binary classifier.

Estimating Probabilities
So how does Logistic Regression work? Just like a Linear Regression model, a Logistic Regression model computes a weighted sum of the input features (plus a bias term), but instead of outputting the result directly like the Linear Regression model does, it outputs the logistic of this result (see Equation 4-13).
Equation 4-13. Logistic Regression model estimated probability (vectorized form)

p ^
=
h θ 

(
x
)

=
σ

(
θ ⊺ 
x
)



The logistic—noted σ(·)—is a sigmoid function (i.e., S-shaped) that outputs a number between 0 and 1. It is defined as shown in Equation 4-14 and Figure 4-21.

Equation 4-14. Logistic function


σ

(
t
)

=

1 1+exp(-t)






Figure 4-21. Logistic function

Once the Logistic Regression model has estimated the probability p^ = hθ(x) that an instance x belongs to the positive class, it can make its prediction ŷ easily (see Equation 4-15).

Equation 4-15. Logistic Regression model prediction


y ^
=




0



if

p ^
<
0.5





1



if

p ^
≥
0.5








Notice that σ(t) < 0.5 when t < 0, and σ(t) ≥ 0.5 when t ≥ 0, so a Logistic Regression model predicts 1 if θ⊺ x is positive and 0 if it is negative.
Note
The score t is often called the logit. The name comes from the fact that the logit function, defined as logit(p) = log(p / (1 – p)), is the inverse of the logistic function. Indeed, if you compute the logit of the estimated probability p, you will find that the result is t. The logit is also called the log-odds, since it is the log of the ratio between the estimated probability for the positive class and the estimated probability for the negative class.



Training and Cost Function
Now you know how a Logistic Regression model estimates probabilities and makes predictions. But how is it trained? The objective of training is to set the parameter vector θ so that the model estimates high probabilities for positive instances (y = 1) and low probabilities for negative instances (y = 0). This idea is captured by the cost function shown in Equation 4-16 for a single training instance x.
Equation 4-16. Cost function of a single training instancec(θ)=-log(p^)if y=1-log(1-p^)if y=0
This cost function makes sense because  –log(t) grows very large when t approaches 0, so the cost will be large if the model estimates a probability close to 0 for a positive instance, and it will also be very large if the model estimates a probability close to 1 for a negative instance. On the other hand, –log(t) is close to 0 when t is close to 1, so the cost will be close to 0 if the estimated probability is close to 0 for a negative instance or close to 1 for a positive instance, which is precisely what we want.
The cost function over the whole training set is the average cost over all training instances. It can be written in a single expression called the log loss, shown in Equation 4-17.
Equation 4-17. Logistic Regression cost function (log loss)J(θ)=-1m∑i=1my(i)logp^(i)+(1-y(i))log1-p^(i)
The bad news is that there is no known closed-form equation to compute the value of θ that minimizes this cost function (there is no equivalent of the Normal Equation). The good news is that this cost function is convex, so Gradient Descent (or any other optimization algorithm) is guaranteed to find the global minimum (if the learning rate is not too large and you wait long enough). The partial derivatives of the cost function with regard to the jth model parameter θj are given by Equation 4-18.
Equation 4-18. Logistic cost function partial derivatives


∂ ∂θ j 

J

(
θ
)

=

1 m

∑ i=1 m 

σ

(
θ ⊺ 
x (i) 
)

-
y (i) 


x j (i) 



This equation looks very much like Equation 4-5: for each instance it computes the prediction error and multiplies it by the jth feature value, and then it computes the average over all training instances. Once you have the gradient vector containing all the partial derivatives, you can use it in the Batch Gradient Descent algorithm. That’s it: you now know how to train a Logistic Regression model. For Stochastic GD you would take one instance at a time, and for Mini-batch GD you would use a mini-batch at a time.


Decision Boundaries
Let’s use the iris dataset to illustrate Logistic Regression. This is a famous dataset that contains the sepal and petal length and width of 150 iris flowers of three different species: Iris setosa, Iris versicolor, and Iris virginica (see Figure 4-22).


Figure 4-22. Flowers of three iris plant species14

Let’s try to build a classifier to detect the Iris virginica type based only on the petal width feature. First let’s load the data:
>>> from sklearn import datasets
>>> iris = datasets.load_iris()
>>> list(iris.keys())
['data', 'target', 'target_names', 'DESCR', 'feature_names', 'filename']
>>> X = iris["data"][:, 3:]  # petal width
>>> y = (iris["target"] == 2).astype(np.int)  # 1 if Iris virginica, else 0
Now let’s train a Logistic Regression model:
from sklearn.linear_model import LogisticRegression

log_reg = LogisticRegression()
log_reg.fit(X, y)
Let’s look at the model’s estimated probabilities for flowers with petal widths varying from 0 cm to 3 cm (Figure 4-23):15
X_new = np.linspace(0, 3, 1000).reshape(-1, 1)
y_proba = log_reg.predict_proba(X_new)
plt.plot(X_new, y_proba[:, 1], "g-", label="Iris virginica")
plt.plot(X_new, y_proba[:, 0], "b--", label="Not Iris virginica")
# + more Matplotlib code to make the image look pretty


Figure 4-23. Estimated probabilities and decision boundary

The petal width of Iris virginica flowers (represented by triangles) ranges from 1.4 cm to 2.5 cm, while the other iris flowers (represented by squares) generally have a smaller petal width, ranging from 0.1 cm to 1.8 cm. Notice that there is a bit of overlap. Above about 2 cm the classifier is highly confident that the flower is an Iris virginica (it outputs a high probability for that class), while below 1 cm it is highly confident that it is not an Iris virginica (high probability for the “Not Iris virginica” class). In between these extremes, the classifier is unsure. However, if you ask it to predict the class (using the predict() method rather than the predict_proba() method), it will return whichever class is the most likely. Therefore, there is a decision boundary at around 1.6 cm where both probabilities are equal to 50%: if the petal width is higher than 1.6 cm, the classifier will predict that the flower is an Iris virginica, and otherwise it will predict that it is not (even if it is not very confident):
>>> log_reg.predict([[1.7], [1.5]])
array([1, 0])
Figure 4-24 shows the same dataset, but this time displaying two features: petal width and length. Once trained, the Logistic Regression classifier can, based on these two features, estimate the probability that a new flower is an Iris virginica. The dashed line represents the points where the model estimates a 50% probability: this is the model’s decision boundary. Note that it is a linear boundary.16 Each parallel line represents the points where the model outputs a specific probability, from 15% (bottom left) to 90% (top right). All the flowers beyond the top-right line have an over 90% chance of being Iris virginica, according to the model.


Figure 4-24. Linear decision boundary

Just like the other linear models, Logistic Regression models can be regularized using ℓ1 or ℓ2 penalties. Scikit-Learn actually adds an ℓ2 penalty by default.
Note
The hyperparameter controlling the regularization strength of a Scikit-Learn LogisticRegression model is not alpha (as in other linear models), but its inverse: C. The higher the value of C, the less the model is regularized.



Softmax Regression
The Logistic Regression model can be generalized to support multiple classes directly, without having to train and combine multiple binary classifiers (as discussed in Chapter 3). This is called Softmax Regression, or Multinomial Logistic Regression.
The idea is simple: when given an instance x, the Softmax Regression model first computes a score sk(x) for each class k, then estimates the probability of each class by applying the softmax function (also called the normalized exponential) to the scores. The equation to compute sk(x) should look familiar, as it is just like the equation for Linear Regression prediction (see Equation 4-19).
Equation 4-19. Softmax score for class k

s k 

(
x
)

=
(θ (k) ) ⊺ 
x



Note that each class has its own dedicated parameter vector θ(k). All these vectors are typically stored as rows in a parameter matrix Θ.
Once you have computed the score of every class for the instance x, you can estimate the probability p^k that the instance belongs to class k by running the scores through the softmax function (Equation 4-20). The function computes the exponential of every score, then normalizes them (dividing by the sum of all the exponentials). The scores are generally called logits or log-odds (although they are actually unnormalized log-odds).
Equation 4-20. Softmax function

p ^ k 
=
σ
s(x) k 
=

exps k (x) ∑ j=1 K exps j (x)




In this equation:


K is the number of classes.


s(x) is a vector containing the scores of each class for the instance x.


σ(s(x))k is the estimated probability that the instance x belongs to class k, given the scores of each class for that instance.


Just like the Logistic Regression classifier, the Softmax Regression classifier predicts the class with the highest estimated probability (which is simply the class with the highest score), as shown in Equation 4-21.
Equation 4-21. Softmax Regression classifier prediction

y ^
=
argmax k

σ
s(x) k 
=
argmax k

s k 

(
x
)

=
argmax k


(θ (k) ) ⊺ 
x




The argmax operator returns the value of a variable that maximizes a function. In this equation, it returns the value of k that maximizes the estimated probability σ(s(x))k.
Tip
The Softmax Regression classifier predicts only one class at a time (i.e., it is multiclass, not multioutput), so it should be used only with mutually exclusive classes, such as different types of plants. You cannot use it to recognize multiple people in one picture.

Now that you know how the model estimates probabilities and makes predictions, let’s take a look at training. The objective is to have a model that estimates a high probability for the target class (and consequently a low probability for the other classes). Minimizing the cost function shown in Equation 4-22, called the cross entropy, should lead to this objective because it penalizes the model when it estimates a low probability for a target class. Cross entropy is frequently used to measure how well a set of estimated class probabilities matches the target classes.
Equation 4-22. Cross entropy cost functionJ(Θ)=-1m∑i=1m∑k=1Kyk(i)logp^k(i)
In this equation:


yk(i) is the target probability that the ith instance belongs to class k. In general, it is either equal to 1 or 0, depending on whether the instance belongs to the class or not.


Notice that when there are just two classes (K = 2), this cost function is equivalent to the Logistic Regression’s cost function (log loss; see Equation 4-17).

Cross Entropy
Cross entropy originated from information theory. Suppose you want to efficiently transmit information about the weather every day. If there are eight options (sunny, rainy, etc.), you could encode each option using three bits because 23 = 8. However, if you think it will be sunny almost every day, it would be much more efficient to code “sunny” on just one bit (0) and the other seven options on four bits (starting with a 1). Cross entropy measures the average number of bits you actually send per option. If your assumption about the weather is perfect, cross entropy will be equal to the entropy of the weather itself (i.e., its intrinsic unpredictability). But if your assumptions are wrong (e.g., if it rains often), cross entropy will be greater by an amount called the Kullback–Leibler (KL) divergence.
The cross entropy between two probability distributions p and q is defined as H(p,q) = —Σx p(x) log q(x) (at least when the distributions are discrete). For more details, check out my video on the subject.

The gradient vector of this cost function with regard to θ(k) is given by Equation 4-23.
Equation 4-23. Cross entropy gradient vector for class k

∇ θ (k)  

J

(
Θ
)

=

1 m

∑ i=1 m 


p ^ k (i) 
-
y k (i) 

x (i) 




Now you can compute the gradient vector for every class, then use Gradient Descent (or any other optimization algorithm) to find the parameter matrix Θ that minimizes the cost function.
Let’s use Softmax Regression to classify the iris flowers into all three classes. Scikit-Learn’s LogisticRegression uses one-versus-the-rest by default when you train it on more than two classes, but you can set the multi_class hyperparameter to "multinomial" to switch it to Softmax Regression. You must also specify a solver that supports Softmax Regression, such as the "lbfgs" solver (see Scikit-Learn’s documentation for more details). It also applies ℓ2 regularization by default, which you can control using the hyperparameter C:
X = iris["data"][:, (2, 3)]  # petal length, petal width
y = iris["target"]

softmax_reg = LogisticRegression(multi_class="multinomial",solver="lbfgs", C=10)
softmax_reg.fit(X, y)
So the next time you find an iris with petals that are 5 cm long and 2 cm wide, you can ask your model to tell you what type of iris it is, and it will answer Iris virginica (class 2) with 94.2% probability (or Iris versicolor with 5.8% probability):
>>> softmax_reg.predict([[5, 2]])
array([2])
>>> softmax_reg.predict_proba([[5, 2]])
array([[6.38014896e-07, 5.74929995e-02, 9.42506362e-01]])
Figure 4-25 shows the resulting decision boundaries, represented by the background colors. Notice that the decision boundaries between any two classes are linear. The figure also shows the probabilities for the Iris versicolor class, represented by the curved lines (e.g., the line labeled with 0.450 represents the 45% probability boundary). Notice that the model can predict a class that has an estimated probability below 50%. For example, at the point where all decision boundaries meet, all classes have an equal estimated probability of 33%.


Figure 4-25. Softmax Regression decision boundaries




Exercises


Which Linear Regression training algorithm can you use if you have a training set with millions of features?


Suppose the features in your training set have very different scales. Which algorithms might suffer from this, and how? What can you do about it?


Can Gradient Descent get stuck in a local minimum when training a Logistic Regression model?


Do all Gradient Descent algorithms lead to the same model, provided you let them run long enough?


Suppose you use Batch Gradient Descent and you plot the validation error at every epoch. If you notice that the validation error consistently goes up, what is likely going on? How can you fix this?


Is it a good idea to stop Mini-batch Gradient Descent immediately when the validation error goes up?


Which Gradient Descent algorithm (among those we discussed) will reach the vicinity of the optimal solution the fastest? Which will actually converge? How can you make the others converge as well?


Suppose you are using Polynomial Regression. You plot the learning curves and you notice that there is a large gap between the training error and the validation error. What is happening? What are three ways to solve this?


Suppose you are using Ridge Regression and you notice that the training error and the validation error are almost equal and fairly high. Would you say that the model suffers from high bias or high variance? Should you increase the regularization hyperparameter α or reduce it?


Why would you want to use:


Ridge Regression instead of plain Linear Regression (i.e., without any regularization)?


Lasso instead of Ridge Regression?


Elastic Net instead of Lasso?




Suppose you want to classify pictures as outdoor/indoor and daytime/nighttime. Should you implement two Logistic Regression classifiers or one Softmax Regression classifier?


Implement Batch Gradient Descent with early stopping for Softmax Regression (without using Scikit-Learn).


Solutions to these exercises are available in Appendix A.

1 It is often the case that a learning algorithm will try to optimize a different function than the performance measure used to evaluate the final model. This is generally because that function is easier to compute, because it has useful differentiation properties that the performance measure lacks, or because we want to constrain the model during training, as you will see when we discuss regularization.2 Note that Scikit-Learn separates the bias term (intercept_) from the feature weights (coef_).3 Technically speaking, its derivative is Lipschitz continuous.4 Since feature 1 is smaller, it takes a larger change in θ1 to affect the cost function, which is why the bowl is elongated along the θ1 axis.5 Eta (η) is the seventh letter of the Greek alphabet.6 While the Normal Equation can only perform Linear Regression, the Gradient Descent algorithms can be used to train many other models, as we will see.7 A quadratic equation is of the form y = ax2 + bx + c.8 This notion of bias is not to be confused with the bias term of linear models.9 It is common to use the notation J(θ) for cost functions that don’t have a short name; we will often use this notation throughout the rest of this book. The context will make it clear which cost function is being discussed.10 Norms are discussed in Chapter 2.11 A square matrix full of 0s except for 1s on the main diagonal (top left to bottom right).12 Alternatively you can use the Ridge class with the "sag" solver. Stochastic Average GD is a variant of Stochastic GD. For more details, see the presentation “Minimizing Finite Sums with the Stochastic Average Gradient Algorithm” by Mark Schmidt et al. from the University of British Columbia.13 You can think of a subgradient vector at a nondifferentiable point as an intermediate vector between the gradient vectors around that point.14 Photos reproduced from the corresponding Wikipedia pages. Iris virginica photo by Frank Mayfield (Creative Commons BY-SA 2.0), Iris versicolor photo by D. Gordon E. Robertson (Creative Commons BY-SA 3.0), Iris setosa photo public domain.15 NumPy’s reshape() function allows one dimension to be –1, which means “unspecified”: the value is inferred from the length of the array and the remaining dimensions.16 It is the the set of points x such that θ0 + θ1x1 +  θ2x2 = 0, which defines a straight line.


Get Hands-On Machine Learning with Scikit-Learn, Keras, and TensorFlow, 2nd Edition now with the O’Reilly learning platform.
O’Reilly members experience books, live events, courses curated by job role, and more from O’Reilly and nearly 200 top publishers.

Start your free trial












About O’Reilly

Teach/write/train
Careers
Press releases
Media coverage
Community partners
Affiliate program
Submit an RFP
Diversity
O’Reilly for marketers





Support

Contact us
Newsletters
Privacy policy


linkedin-logo
youtube-logo


International

Australia & New Zealand
Hong Kong & Taiwan
India
Indonesia
Japan





Download the O’Reilly App
Take O’Reilly with you and learn anywhere, anytime on your phone and tablet.






Watch on your big screen
View all O’Reilly videos, Superstream events, and Meet the Expert sessions on your home TV.






Do not sell my personal information






© 2024, O’Reilly Media, Inc. All trademarks and registered trademarks appearing on oreilly.com are the property of their respective owners.
We are a participant in the Amazon Services LLC Associates Program, an affiliate advertising program designed to provide a means for us to earn fees by linking to Amazon.com and affiliated sites.
Terms of service • Privacy policy • Editorial independence







Don’t leave empty-handed
Get Mark Richards’s Software Architecture Patterns ebook to better understand how to design components—and how they should interact.
It’s yours, free.
Get it now



Close






Check it out now on O’Reilly
Dive in for free with a 10-day trial of the O’Reilly learning platform—then explore all the other resources our members count on to build skills and solve problems every day.
Start your free trial
Become a member now



Close































5. Support Vector Machines - Hands-On Machine Learning with Scikit-Learn, Keras, and TensorFlow, 2nd Edition [Book]






























Skip to main content













Sign In
Try Now




Teams

For business
For government
For higher ed


Individuals
Features

All features
Courses
Certifications
Interactive learning
Live events
Answers
Insights reporting


Blog
Content sponsorship



















Hands-On Machine Learning with Scikit-Learn, Keras, and TensorFlow, 2nd Edition by Aurélien Géron




Buy on Amazon







Get full access to Hands-On Machine Learning with Scikit-Learn, Keras, and TensorFlow, 2nd Edition and 60K+ other titles, with a free 10-day trial of O'Reilly.
There are also live events, courses curated by job role, and more.

Start your free trial










Chapter 5. Support Vector Machines
A Support Vector Machine (SVM) is a powerful and versatile Machine Learning model, capable of performing linear or nonlinear classification, regression, and even outlier detection. It is one of the most popular models in Machine Learning, and anyone interested in Machine Learning should have it in their toolbox. SVMs are particularly well suited for classification of complex small- or medium-sized datasets.
This chapter will explain the core concepts of SVMs, how to use them, and how they work.

Linear SVM Classification
The fundamental idea behind SVMs is best explained with some pictures. Figure 5-1 shows part of the iris dataset that was introduced at the end of Chapter 4. The two classes can clearly be separated easily with a straight line (they are linearly separable). The left plot shows the decision boundaries of three possible linear classifiers. The model whose decision boundary is represented by the dashed line is so bad that it does not even separate the classes properly. The other two models work perfectly on this training set, but their decision boundaries come so close to the instances that these models will probably not perform as well on new instances. In contrast, the solid line in the plot on the right represents the decision boundary of an SVM classifier; this line not only separates the two classes but also stays as far away from the closest training instances as possible. You can think of an SVM classifier as fitting the ...


Get Hands-On Machine Learning with Scikit-Learn, Keras, and TensorFlow, 2nd Edition now with the O’Reilly learning platform.
O’Reilly members experience books, live events, courses curated by job role, and more from O’Reilly and nearly 200 top publishers.

Start your free trial












About O’Reilly

Teach/write/train
Careers
Press releases
Media coverage
Community partners
Affiliate program
Submit an RFP
Diversity
O’Reilly for marketers





Support

Contact us
Newsletters
Privacy policy


linkedin-logo
youtube-logo


International

Australia & New Zealand
Hong Kong & Taiwan
India
Indonesia
Japan





Download the O’Reilly App
Take O’Reilly with you and learn anywhere, anytime on your phone and tablet.






Watch on your big screen
View all O’Reilly videos, Superstream events, and Meet the Expert sessions on your home TV.






Do not sell my personal information






© 2024, O’Reilly Media, Inc. All trademarks and registered trademarks appearing on oreilly.com are the property of their respective owners.
We are a participant in the Amazon Services LLC Associates Program, an affiliate advertising program designed to provide a means for us to earn fees by linking to Amazon.com and affiliated sites.
Terms of service • Privacy policy • Editorial independence







Don’t leave empty-handed
Get Mark Richards’s Software Architecture Patterns ebook to better understand how to design components—and how they should interact.
It’s yours, free.
Get it now



Close






Check it out now on O’Reilly
Dive in for free with a 10-day trial of the O’Reilly learning platform—then explore all the other resources our members count on to build skills and solve problems every day.
Start your free trial
Become a member now



Close































6. Decision Trees - Hands-On Machine Learning with Scikit-Learn, Keras, and TensorFlow, 2nd Edition [Book]






























Skip to main content













Sign In
Try Now




Teams

For business
For government
For higher ed


Individuals
Features

All features
Courses
Certifications
Interactive learning
Live events
Answers
Insights reporting


Blog
Content sponsorship



















Hands-On Machine Learning with Scikit-Learn, Keras, and TensorFlow, 2nd Edition by Aurélien Géron




Buy on Amazon







Get full access to Hands-On Machine Learning with Scikit-Learn, Keras, and TensorFlow, 2nd Edition and 60K+ other titles, with a free 10-day trial of O'Reilly.
There are also live events, courses curated by job role, and more.

Start your free trial










Chapter 6. Decision Trees
Like SVMs, Decision Trees are versatile Machine Learning algorithms that can perform both classification and regression tasks, and even multioutput tasks. They are powerful algorithms, capable of fitting complex datasets. For example, in Chapter 2 you trained a DecisionTreeRegressor model on the California housing dataset, fitting it perfectly (actually, overfitting it).
Decision Trees are also the fundamental components of Random Forests (see Chapter 7), which are among the most powerful Machine Learning algorithms available today.
In this chapter we will start by discussing how to train, visualize, and make predictions with Decision Trees. Then we will go through the CART training algorithm used by Scikit-Learn, and we will discuss how to regularize trees and use them for regression tasks. Finally, we will discuss some of the limitations of Decision Trees.

Training and Visualizing a Decision Tree
To understand Decision Trees, let’s build one and take a look at how it makes predictions. The following code trains a DecisionTreeClassifier on the iris dataset (see Chapter 4):
from sklearn.datasets import load_iris
from sklearn.tree import DecisionTreeClassifier

iris = load_iris()
X = iris.data[:, 2:] # petal length and width
y = iris.target

tree_clf = DecisionTreeClassifier(max_depth=2)
tree_clf.fit(X, y)
You can visualize the trained Decision Tree by first using the export_graphviz() method to output a graph definition file called iris_tree.dot:
from ...


Get Hands-On Machine Learning with Scikit-Learn, Keras, and TensorFlow, 2nd Edition now with the O’Reilly learning platform.
O’Reilly members experience books, live events, courses curated by job role, and more from O’Reilly and nearly 200 top publishers.

Start your free trial












About O’Reilly

Teach/write/train
Careers
Press releases
Media coverage
Community partners
Affiliate program
Submit an RFP
Diversity
O’Reilly for marketers





Support

Contact us
Newsletters
Privacy policy


linkedin-logo
youtube-logo


International

Australia & New Zealand
Hong Kong & Taiwan
India
Indonesia
Japan





Download the O’Reilly App
Take O’Reilly with you and learn anywhere, anytime on your phone and tablet.






Watch on your big screen
View all O’Reilly videos, Superstream events, and Meet the Expert sessions on your home TV.






Do not sell my personal information






© 2024, O’Reilly Media, Inc. All trademarks and registered trademarks appearing on oreilly.com are the property of their respective owners.
We are a participant in the Amazon Services LLC Associates Program, an affiliate advertising program designed to provide a means for us to earn fees by linking to Amazon.com and affiliated sites.
Terms of service • Privacy policy • Editorial independence







Don’t leave empty-handed
Get Mark Richards’s Software Architecture Patterns ebook to better understand how to design components—and how they should interact.
It’s yours, free.
Get it now



Close






Check it out now on O’Reilly
Dive in for free with a 10-day trial of the O’Reilly learning platform—then explore all the other resources our members count on to build skills and solve problems every day.
Start your free trial
Become a member now



Close































7. Ensemble Learning and Random Forests - Hands-On Machine Learning with Scikit-Learn, Keras, and TensorFlow, 2nd Edition [Book]






























Skip to main content













Sign In
Try Now




Teams

For business
For government
For higher ed


Individuals
Features

All features
Courses
Certifications
Interactive learning
Live events
Answers
Insights reporting


Blog
Content sponsorship



















Hands-On Machine Learning with Scikit-Learn, Keras, and TensorFlow, 2nd Edition by Aurélien Géron




Buy on Amazon







Get full access to Hands-On Machine Learning with Scikit-Learn, Keras, and TensorFlow, 2nd Edition and 60K+ other titles, with a free 10-day trial of O'Reilly.
There are also live events, courses curated by job role, and more.

Start your free trial










Chapter 7. Ensemble Learning and Random Forests
Suppose you pose a complex question to thousands of random people, then aggregate their answers. In many cases you will find that this aggregated answer is better than an expert’s answer. This is called the wisdom of the crowd. Similarly, if you aggregate the predictions of a group of predictors (such as classifiers or regressors), you will often get better predictions than with the best individual predictor. A group of predictors is called an ensemble; thus, this technique is called Ensemble Learning, and an Ensemble Learning algorithm is called an Ensemble method.
As an example of an Ensemble method, you can train a group of Decision Tree classifiers, each on a different random subset of the training set. To make predictions, you obtain the predictions of all the individual trees, then predict the class that gets the most votes (see the last exercise in Chapter 6). Such an ensemble of Decision Trees is called a Random Forest, and despite its simplicity, this is one of the most powerful Machine Learning algorithms available today.
As discussed in Chapter 2, you will often use Ensemble methods near the end of a project, once you have already built a few good predictors, to combine them into an even better predictor. In fact, the winning solutions in Machine Learning competitions often involve several Ensemble methods (most famously in the Netflix Prize competition).
In this chapter we will discuss the most popular Ensemble methods, ...


Get Hands-On Machine Learning with Scikit-Learn, Keras, and TensorFlow, 2nd Edition now with the O’Reilly learning platform.
O’Reilly members experience books, live events, courses curated by job role, and more from O’Reilly and nearly 200 top publishers.

Start your free trial












About O’Reilly

Teach/write/train
Careers
Press releases
Media coverage
Community partners
Affiliate program
Submit an RFP
Diversity
O’Reilly for marketers





Support

Contact us
Newsletters
Privacy policy


linkedin-logo
youtube-logo


International

Australia & New Zealand
Hong Kong & Taiwan
India
Indonesia
Japan





Download the O’Reilly App
Take O’Reilly with you and learn anywhere, anytime on your phone and tablet.






Watch on your big screen
View all O’Reilly videos, Superstream events, and Meet the Expert sessions on your home TV.






Do not sell my personal information






© 2024, O’Reilly Media, Inc. All trademarks and registered trademarks appearing on oreilly.com are the property of their respective owners.
We are a participant in the Amazon Services LLC Associates Program, an affiliate advertising program designed to provide a means for us to earn fees by linking to Amazon.com and affiliated sites.
Terms of service • Privacy policy • Editorial independence







Don’t leave empty-handed
Get Mark Richards’s Software Architecture Patterns ebook to better understand how to design components—and how they should interact.
It’s yours, free.
Get it now



Close






Check it out now on O’Reilly
Dive in for free with a 10-day trial of the O’Reilly learning platform—then explore all the other resources our members count on to build skills and solve problems every day.
Start your free trial
Become a member now



Close































8. Dimensionality Reduction - Hands-On Machine Learning with Scikit-Learn, Keras, and TensorFlow, 2nd Edition [Book]






























Skip to main content













Sign In
Try Now




Teams

For business
For government
For higher ed


Individuals
Features

All features
Courses
Certifications
Interactive learning
Live events
Answers
Insights reporting


Blog
Content sponsorship



















Hands-On Machine Learning with Scikit-Learn, Keras, and TensorFlow, 2nd Edition by Aurélien Géron




Buy on Amazon







Get full access to Hands-On Machine Learning with Scikit-Learn, Keras, and TensorFlow, 2nd Edition and 60K+ other titles, with a free 10-day trial of O'Reilly.
There are also live events, courses curated by job role, and more.

Start your free trial










Chapter 8. Dimensionality Reduction
Many Machine Learning problems involve thousands or even millions of features for each training instance. Not only do all these features make training extremely slow, but they can also make it much harder to find a good solution, as we will see. This problem is often referred to as the curse of dimensionality.
Fortunately, in real-world problems, it is often possible to reduce the number of features considerably, turning an intractable problem into a tractable one. For example, consider the MNIST images (introduced in Chapter 3): the pixels on the image borders are almost always white, so you could completely drop these pixels from the training set without losing much information. Figure 7-6 confirms that these pixels are utterly unimportant for the classification task. Additionally, two neighboring pixels are often highly correlated: if you merge them into a single pixel (e.g., by taking the mean of the two pixel intensities), you will not lose much information.
Warning
Reducing dimensionality does cause some information loss (just like compressing an image to JPEG can degrade its quality), so even though it will speed up training, it may make your system perform slightly worse. It also makes your pipelines a bit more complex and thus harder to maintain. So, if training is too slow, you should first try to train your system with the original data before considering using dimensionality reduction. In some cases, reducing the dimensionality of ...


Get Hands-On Machine Learning with Scikit-Learn, Keras, and TensorFlow, 2nd Edition now with the O’Reilly learning platform.
O’Reilly members experience books, live events, courses curated by job role, and more from O’Reilly and nearly 200 top publishers.

Start your free trial












About O’Reilly

Teach/write/train
Careers
Press releases
Media coverage
Community partners
Affiliate program
Submit an RFP
Diversity
O’Reilly for marketers





Support

Contact us
Newsletters
Privacy policy


linkedin-logo
youtube-logo


International

Australia & New Zealand
Hong Kong & Taiwan
India
Indonesia
Japan





Download the O’Reilly App
Take O’Reilly with you and learn anywhere, anytime on your phone and tablet.






Watch on your big screen
View all O’Reilly videos, Superstream events, and Meet the Expert sessions on your home TV.






Do not sell my personal information






© 2024, O’Reilly Media, Inc. All trademarks and registered trademarks appearing on oreilly.com are the property of their respective owners.
We are a participant in the Amazon Services LLC Associates Program, an affiliate advertising program designed to provide a means for us to earn fees by linking to Amazon.com and affiliated sites.
Terms of service • Privacy policy • Editorial independence







Don’t leave empty-handed
Get Mark Richards’s Software Architecture Patterns ebook to better understand how to design components—and how they should interact.
It’s yours, free.
Get it now



Close






Check it out now on O’Reilly
Dive in for free with a 10-day trial of the O’Reilly learning platform—then explore all the other resources our members count on to build skills and solve problems every day.
Start your free trial
Become a member now



Close































9. Unsupervised Learning Techniques - Hands-On Machine Learning with Scikit-Learn, Keras, and TensorFlow, 2nd Edition [Book]






























Skip to main content













Sign In
Try Now




Teams

For business
For government
For higher ed


Individuals
Features

All features
Courses
Certifications
Interactive learning
Live events
Answers
Insights reporting


Blog
Content sponsorship



















Hands-On Machine Learning with Scikit-Learn, Keras, and TensorFlow, 2nd Edition by Aurélien Géron




Buy on Amazon







Get full access to Hands-On Machine Learning with Scikit-Learn, Keras, and TensorFlow, 2nd Edition and 60K+ other titles, with a free 10-day trial of O'Reilly.
There are also live events, courses curated by job role, and more.

Start your free trial










Chapter 9. Unsupervised Learning Techniques
Although most of the applications of Machine Learning today are based on supervised learning (and as a result, this is where most of the investments go to), the vast majority of the available data is unlabeled: we have the input features X, but we do not have the labels y. The computer scientist Yann LeCun famously said that “if intelligence was a cake, unsupervised learning would be the cake, supervised learning would be the icing on the cake, and reinforcement learning would be the cherry on the cake.” In other words, there is a huge potential in unsupervised learning that we have only barely started to sink our teeth into.
Say you want to create a system that will take a few pictures of each item on a manufacturing production line and detect which items are defective. You can fairly easily create a system that will take pictures automatically, and this might give you thousands of pictures every day. You can then build a reasonably large dataset in just a few weeks. But wait, there are no labels! If you want to train a regular binary classifier that will predict whether an item is defective or not, you will need to label every single picture as “defective” or “normal.” This will generally require human experts to sit down and manually go through all the pictures. This is a long, costly, and tedious task, so it will usually only be done on a small subset of the available pictures. As a result, the labeled dataset will be quite small, ...


Get Hands-On Machine Learning with Scikit-Learn, Keras, and TensorFlow, 2nd Edition now with the O’Reilly learning platform.
O’Reilly members experience books, live events, courses curated by job role, and more from O’Reilly and nearly 200 top publishers.

Start your free trial












About O’Reilly

Teach/write/train
Careers
Press releases
Media coverage
Community partners
Affiliate program
Submit an RFP
Diversity
O’Reilly for marketers





Support

Contact us
Newsletters
Privacy policy


linkedin-logo
youtube-logo


International

Australia & New Zealand
Hong Kong & Taiwan
India
Indonesia
Japan





Download the O’Reilly App
Take O’Reilly with you and learn anywhere, anytime on your phone and tablet.






Watch on your big screen
View all O’Reilly videos, Superstream events, and Meet the Expert sessions on your home TV.






Do not sell my personal information






© 2024, O’Reilly Media, Inc. All trademarks and registered trademarks appearing on oreilly.com are the property of their respective owners.
We are a participant in the Amazon Services LLC Associates Program, an affiliate advertising program designed to provide a means for us to earn fees by linking to Amazon.com and affiliated sites.
Terms of service • Privacy policy • Editorial independence







Don’t leave empty-handed
Get Mark Richards’s Software Architecture Patterns ebook to better understand how to design components—and how they should interact.
It’s yours, free.
Get it now



Close






Check it out now on O’Reilly
Dive in for free with a 10-day trial of the O’Reilly learning platform—then explore all the other resources our members count on to build skills and solve problems every day.
Start your free trial
Become a member now



Close































10. Introduction to Artificial Neural Networks with Keras - Hands-On Machine Learning with Scikit-Learn, Keras, and TensorFlow, 2nd Edition [Book]






























Skip to main content













Sign In
Try Now




Teams

For business
For government
For higher ed


Individuals
Features

All features
Courses
Certifications
Interactive learning
Live events
Answers
Insights reporting


Blog
Content sponsorship



















Hands-On Machine Learning with Scikit-Learn, Keras, and TensorFlow, 2nd Edition by Aurélien Géron




Buy on Amazon







Get full access to Hands-On Machine Learning with Scikit-Learn, Keras, and TensorFlow, 2nd Edition and 60K+ other titles, with a free 10-day trial of O'Reilly.
There are also live events, courses curated by job role, and more.

Start your free trial










Chapter 10. Introduction to Artificial Neural Networks with Keras
Birds inspired us to fly, burdock plants inspired Velcro, and nature has inspired countless more inventions. It seems only logical, then, to look at the brain’s architecture for inspiration on how to build an intelligent machine. This is the logic that sparked artificial neural networks (ANNs): an ANN is a Machine Learning model inspired by the networks of biological neurons found in our brains. However, although planes were inspired by birds, they don’t have to flap their wings. Similarly, ANNs have gradually become quite different from their biological cousins. Some researchers even argue that we should drop the biological analogy altogether (e.g., by saying “units” rather than “neurons”), lest we restrict our creativity to biologically plausible systems.1
ANNs are at the very core of Deep Learning. They are versatile, powerful, and scalable, making them ideal to tackle large and highly complex Machine Learning tasks such as classifying billions of images (e.g., Google Images), powering speech recognition services (e.g., Apple’s Siri), recommending the best videos to watch to hundreds of millions of users every day (e.g., YouTube), or learning to beat the world champion at the game of Go (DeepMind’s AlphaGo).
The first part of this chapter introduces artificial neural networks, starting with a quick tour of the very first ANN architectures and leading up to Multilayer Perceptrons (MLPs), which are heavily used ...


Get Hands-On Machine Learning with Scikit-Learn, Keras, and TensorFlow, 2nd Edition now with the O’Reilly learning platform.
O’Reilly members experience books, live events, courses curated by job role, and more from O’Reilly and nearly 200 top publishers.

Start your free trial












About O’Reilly

Teach/write/train
Careers
Press releases
Media coverage
Community partners
Affiliate program
Submit an RFP
Diversity
O’Reilly for marketers





Support

Contact us
Newsletters
Privacy policy


linkedin-logo
youtube-logo


International

Australia & New Zealand
Hong Kong & Taiwan
India
Indonesia
Japan





Download the O’Reilly App
Take O’Reilly with you and learn anywhere, anytime on your phone and tablet.






Watch on your big screen
View all O’Reilly videos, Superstream events, and Meet the Expert sessions on your home TV.






Do not sell my personal information






© 2024, O’Reilly Media, Inc. All trademarks and registered trademarks appearing on oreilly.com are the property of their respective owners.
We are a participant in the Amazon Services LLC Associates Program, an affiliate advertising program designed to provide a means for us to earn fees by linking to Amazon.com and affiliated sites.
Terms of service • Privacy policy • Editorial independence







Don’t leave empty-handed
Get Mark Richards’s Software Architecture Patterns ebook to better understand how to design components—and how they should interact.
It’s yours, free.
Get it now



Close






Check it out now on O’Reilly
Dive in for free with a 10-day trial of the O’Reilly learning platform—then explore all the other resources our members count on to build skills and solve problems every day.
Start your free trial
Become a member now



Close































11. Training Deep Neural Networks - Hands-On Machine Learning with Scikit-Learn, Keras, and TensorFlow, 2nd Edition [Book]






























Skip to main content













Sign In
Try Now




Teams

For business
For government
For higher ed


Individuals
Features

All features
Courses
Certifications
Interactive learning
Live events
Answers
Insights reporting


Blog
Content sponsorship



















Hands-On Machine Learning with Scikit-Learn, Keras, and TensorFlow, 2nd Edition by Aurélien Géron




Buy on Amazon







Get full access to Hands-On Machine Learning with Scikit-Learn, Keras, and TensorFlow, 2nd Edition and 60K+ other titles, with a free 10-day trial of O'Reilly.
There are also live events, courses curated by job role, and more.

Start your free trial










Chapter 11. Training Deep Neural Networks
In Chapter 10 we introduced artificial neural networks and trained our first deep neural networks. But they were shallow nets, with just a few hidden layers. What if you need to tackle a complex problem, such as detecting hundreds of types of objects in high-resolution images? You may need to train a much deeper DNN, perhaps with 10 layers or many more, each containing hundreds of neurons, linked by hundreds of thousands of connections. Training a deep DNN isn’t a walk in the park. Here are some of the problems you could run into:


You may be faced with the tricky vanishing gradients problem or the related exploding gradients problem. This is when the gradients grow smaller and smaller, or larger and larger, when flowing backward through the DNN during training. Both of these problems make lower layers very hard to train.


You might not have enough training data for such a large network, or it might be too costly to label.


Training may be extremely slow.


A model with millions of parameters would severely risk overfitting the training set, especially if there are not enough training instances or if they are too noisy.


In this chapter we will go through each of these problems and present techniques to solve them. We will start by exploring the vanishing and exploding gradients problems and some of their most popular solutions. Next, we will look at transfer learning and unsupervised pretraining, which can help you tackle complex ...


Get Hands-On Machine Learning with Scikit-Learn, Keras, and TensorFlow, 2nd Edition now with the O’Reilly learning platform.
O’Reilly members experience books, live events, courses curated by job role, and more from O’Reilly and nearly 200 top publishers.

Start your free trial












About O’Reilly

Teach/write/train
Careers
Press releases
Media coverage
Community partners
Affiliate program
Submit an RFP
Diversity
O’Reilly for marketers





Support

Contact us
Newsletters
Privacy policy


linkedin-logo
youtube-logo


International

Australia & New Zealand
Hong Kong & Taiwan
India
Indonesia
Japan





Download the O’Reilly App
Take O’Reilly with you and learn anywhere, anytime on your phone and tablet.






Watch on your big screen
View all O’Reilly videos, Superstream events, and Meet the Expert sessions on your home TV.






Do not sell my personal information






© 2024, O’Reilly Media, Inc. All trademarks and registered trademarks appearing on oreilly.com are the property of their respective owners.
We are a participant in the Amazon Services LLC Associates Program, an affiliate advertising program designed to provide a means for us to earn fees by linking to Amazon.com and affiliated sites.
Terms of service • Privacy policy • Editorial independence







Don’t leave empty-handed
Get Mark Richards’s Software Architecture Patterns ebook to better understand how to design components—and how they should interact.
It’s yours, free.
Get it now



Close






Check it out now on O’Reilly
Dive in for free with a 10-day trial of the O’Reilly learning platform—then explore all the other resources our members count on to build skills and solve problems every day.
Start your free trial
Become a member now



Close































12. Custom Models and Training with TensorFlow - Hands-On Machine Learning with Scikit-Learn, Keras, and TensorFlow, 2nd Edition [Book]






























Skip to main content













Sign In
Try Now




Teams

For business
For government
For higher ed


Individuals
Features

All features
Courses
Certifications
Interactive learning
Live events
Answers
Insights reporting


Blog
Content sponsorship



















Hands-On Machine Learning with Scikit-Learn, Keras, and TensorFlow, 2nd Edition by Aurélien Géron




Buy on Amazon







Get full access to Hands-On Machine Learning with Scikit-Learn, Keras, and TensorFlow, 2nd Edition and 60K+ other titles, with a free 10-day trial of O'Reilly.
There are also live events, courses curated by job role, and more.

Start your free trial










Chapter 12. Custom Models and Training with TensorFlow
Up until now, we’ve used only TensorFlow’s high-level API, tf.keras, but it already got us pretty far: we built various neural network architectures, including regression and classification nets, Wide & Deep nets, and self-normalizing nets, using all sorts of techniques, such as Batch Normalization, dropout, and learning rate schedules. In fact, 95% of the use cases you will encounter will not require anything other than tf.keras (and tf.data; see Chapter 13). But now it’s time to dive deeper into TensorFlow and take a look at its lower-level Python API. This will be useful when you need extra control to write custom loss functions, custom metrics, layers, models, initializers, regularizers, weight constraints, and more. You may even need to fully control the training loop itself, for example to apply special transformations or constraints to the gradients (beyond just clipping them) or to use multiple optimizers for different parts of the network. We will cover all these cases in this chapter, and we will also look at how you can boost your custom models and training algorithms using TensorFlow’s automatic graph generation feature. But first, let’s take a quick tour of TensorFlow.
Note
TensorFlow 2.0 (beta) was released in June 2019, making TensorFlow much easier to use. The first edition of this book used TF 1, while this edition uses TF 2.


A Quick Tour of TensorFlow
As you know, TensorFlow is a powerful library for numerical ...


Get Hands-On Machine Learning with Scikit-Learn, Keras, and TensorFlow, 2nd Edition now with the O’Reilly learning platform.
O’Reilly members experience books, live events, courses curated by job role, and more from O’Reilly and nearly 200 top publishers.

Start your free trial












About O’Reilly

Teach/write/train
Careers
Press releases
Media coverage
Community partners
Affiliate program
Submit an RFP
Diversity
O’Reilly for marketers





Support

Contact us
Newsletters
Privacy policy


linkedin-logo
youtube-logo


International

Australia & New Zealand
Hong Kong & Taiwan
India
Indonesia
Japan





Download the O’Reilly App
Take O’Reilly with you and learn anywhere, anytime on your phone and tablet.






Watch on your big screen
View all O’Reilly videos, Superstream events, and Meet the Expert sessions on your home TV.






Do not sell my personal information






© 2024, O’Reilly Media, Inc. All trademarks and registered trademarks appearing on oreilly.com are the property of their respective owners.
We are a participant in the Amazon Services LLC Associates Program, an affiliate advertising program designed to provide a means for us to earn fees by linking to Amazon.com and affiliated sites.
Terms of service • Privacy policy • Editorial independence







Don’t leave empty-handed
Get Mark Richards’s Software Architecture Patterns ebook to better understand how to design components—and how they should interact.
It’s yours, free.
Get it now



Close






Check it out now on O’Reilly
Dive in for free with a 10-day trial of the O’Reilly learning platform—then explore all the other resources our members count on to build skills and solve problems every day.
Start your free trial
Become a member now



Close































13. Loading and Preprocessing Data with TensorFlow - Hands-On Machine Learning with Scikit-Learn, Keras, and TensorFlow, 2nd Edition [Book]






























Skip to main content













Sign In
Try Now




Teams

For business
For government
For higher ed


Individuals
Features

All features
Courses
Certifications
Interactive learning
Live events
Answers
Insights reporting


Blog
Content sponsorship



















Hands-On Machine Learning with Scikit-Learn, Keras, and TensorFlow, 2nd Edition by Aurélien Géron




Buy on Amazon







Get full access to Hands-On Machine Learning with Scikit-Learn, Keras, and TensorFlow, 2nd Edition and 60K+ other titles, with a free 10-day trial of O'Reilly.
There are also live events, courses curated by job role, and more.

Start your free trial










Chapter 13. Loading and Preprocessing Data with TensorFlow
So far we have used only datasets that fit in memory, but Deep Learning systems are often trained on very large datasets that will not fit in RAM. Ingesting a large dataset and preprocessing it efficiently can be tricky to implement with other Deep Learning libraries, but TensorFlow makes it easy thanks to the Data API: you just create a dataset object, and tell it where to get the data and how to transform it. TensorFlow takes care of all the implementation details, such as multithreading, queuing, batching, and prefetching. Moreover, the Data API works seamlessly with tf.keras!
Off the shelf, the Data API can read from text files (such as CSV files), binary files with fixed-size records, and binary files that use TensorFlow’s TFRecord format, which supports records of varying sizes. TFRecord is a flexible and efficient binary format usually containing protocol buffers (an open source binary format). The Data API also has support for reading from SQL databases. Moreover, many open source extensions are available to read from all sorts of data sources, such as Google’s BigQuery service.
Reading huge datasets efficiently is not the only difficulty: the data also needs to be preprocessed, usually normalized. Moreover, it is not always composed strictly of convenient numerical fields: there may be text features, categorical features, and so on. These need to be encoded, for example using one-hot encoding, bag-of-words encoding, ...


Get Hands-On Machine Learning with Scikit-Learn, Keras, and TensorFlow, 2nd Edition now with the O’Reilly learning platform.
O’Reilly members experience books, live events, courses curated by job role, and more from O’Reilly and nearly 200 top publishers.

Start your free trial












About O’Reilly

Teach/write/train
Careers
Press releases
Media coverage
Community partners
Affiliate program
Submit an RFP
Diversity
O’Reilly for marketers





Support

Contact us
Newsletters
Privacy policy


linkedin-logo
youtube-logo


International

Australia & New Zealand
Hong Kong & Taiwan
India
Indonesia
Japan





Download the O’Reilly App
Take O’Reilly with you and learn anywhere, anytime on your phone and tablet.






Watch on your big screen
View all O’Reilly videos, Superstream events, and Meet the Expert sessions on your home TV.






Do not sell my personal information






© 2024, O’Reilly Media, Inc. All trademarks and registered trademarks appearing on oreilly.com are the property of their respective owners.
We are a participant in the Amazon Services LLC Associates Program, an affiliate advertising program designed to provide a means for us to earn fees by linking to Amazon.com and affiliated sites.
Terms of service • Privacy policy • Editorial independence







Don’t leave empty-handed
Get Mark Richards’s Software Architecture Patterns ebook to better understand how to design components—and how they should interact.
It’s yours, free.
Get it now



Close






Check it out now on O’Reilly
Dive in for free with a 10-day trial of the O’Reilly learning platform—then explore all the other resources our members count on to build skills and solve problems every day.
Start your free trial
Become a member now



Close































14. Deep Computer Vision Using Convolutional Neural Networks - Hands-On Machine Learning with Scikit-Learn, Keras, and TensorFlow, 2nd Edition [Book]






























Skip to main content













Sign In
Try Now




Teams

For business
For government
For higher ed


Individuals
Features

All features
Courses
Certifications
Interactive learning
Live events
Answers
Insights reporting


Blog
Content sponsorship



















Hands-On Machine Learning with Scikit-Learn, Keras, and TensorFlow, 2nd Edition by Aurélien Géron




Buy on Amazon







Get full access to Hands-On Machine Learning with Scikit-Learn, Keras, and TensorFlow, 2nd Edition and 60K+ other titles, with a free 10-day trial of O'Reilly.
There are also live events, courses curated by job role, and more.

Start your free trial










Chapter 14. Deep Computer Vision Using Convolutional Neural Networks
Although IBM’s Deep Blue supercomputer beat the chess world champion Garry Kasparov back in 1996, it wasn’t until fairly recently that computers were able to reliably perform seemingly trivial tasks such as detecting a puppy in a picture or recognizing spoken words. Why are these tasks so effortless to us humans? The answer lies in the fact that perception largely takes place outside the realm of our consciousness, within specialized visual, auditory, and other sensory modules in our brains. By the time sensory information reaches our consciousness, it is already adorned with high-level features; for example, when you look at a picture of a cute puppy, you cannot choose not to see the puppy, not to notice its cuteness. Nor can you explain how you recognize a cute puppy; it’s just obvious to you. Thus, we cannot trust our subjective experience: perception is not trivial at all, and to understand it we must look at how the sensory modules work.
Convolutional neural networks (CNNs) emerged from the study of the brain’s visual cortex, and they have been used in image recognition since the 1980s. In the last few years, thanks to the increase in computational power, the amount of available training data, and the tricks presented in Chapter 11 for training deep nets, CNNs have managed to achieve superhuman performance on some complex visual tasks. They power image search services, self-driving cars, automatic video ...


Get Hands-On Machine Learning with Scikit-Learn, Keras, and TensorFlow, 2nd Edition now with the O’Reilly learning platform.
O’Reilly members experience books, live events, courses curated by job role, and more from O’Reilly and nearly 200 top publishers.

Start your free trial












About O’Reilly

Teach/write/train
Careers
Press releases
Media coverage
Community partners
Affiliate program
Submit an RFP
Diversity
O’Reilly for marketers





Support

Contact us
Newsletters
Privacy policy


linkedin-logo
youtube-logo


International

Australia & New Zealand
Hong Kong & Taiwan
India
Indonesia
Japan





Download the O’Reilly App
Take O’Reilly with you and learn anywhere, anytime on your phone and tablet.






Watch on your big screen
View all O’Reilly videos, Superstream events, and Meet the Expert sessions on your home TV.






Do not sell my personal information






© 2024, O’Reilly Media, Inc. All trademarks and registered trademarks appearing on oreilly.com are the property of their respective owners.
We are a participant in the Amazon Services LLC Associates Program, an affiliate advertising program designed to provide a means for us to earn fees by linking to Amazon.com and affiliated sites.
Terms of service • Privacy policy • Editorial independence







Don’t leave empty-handed
Get Mark Richards’s Software Architecture Patterns ebook to better understand how to design components—and how they should interact.
It’s yours, free.
Get it now



Close






Check it out now on O’Reilly
Dive in for free with a 10-day trial of the O’Reilly learning platform—then explore all the other resources our members count on to build skills and solve problems every day.
Start your free trial
Become a member now



Close































15. Processing Sequences Using RNNs and CNNs - Hands-On Machine Learning with Scikit-Learn, Keras, and TensorFlow, 2nd Edition [Book]






























Skip to main content













Sign In
Try Now




Teams

For business
For government
For higher ed


Individuals
Features

All features
Courses
Certifications
Interactive learning
Live events
Answers
Insights reporting


Blog
Content sponsorship



















Hands-On Machine Learning with Scikit-Learn, Keras, and TensorFlow, 2nd Edition by Aurélien Géron




Buy on Amazon







Get full access to Hands-On Machine Learning with Scikit-Learn, Keras, and TensorFlow, 2nd Edition and 60K+ other titles, with a free 10-day trial of O'Reilly.
There are also live events, courses curated by job role, and more.

Start your free trial










Chapter 15. Processing Sequences Using RNNs and CNNs
The batter hits the ball. The outfielder immediately starts running, anticipating the ball’s trajectory. He tracks it, adapts his movements, and finally catches it (under a thunder of applause). Predicting the future is something you do all the time, whether you are finishing a friend’s sentence or anticipating the smell of coffee at breakfast. In this chapter we will discuss recurrent neural networks (RNNs), a class of nets that can predict the future (well, up to a point, of course). They can analyze time series data such as stock prices, and tell you when to buy or sell. In autonomous driving systems, they can anticipate car trajectories and help avoid accidents. More generally, they can work on sequences of arbitrary lengths, rather than on fixed-sized inputs like all the nets we have considered so far. For example, they can take sentences, documents, or audio samples as input, making them extremely useful for natural language processing applications such as automatic translation or speech-to-text.
In this chapter we will first look at the fundamental concepts underlying RNNs and how to train them using backpropagation through time, then we will use them to forecast a time series. After that we’ll explore the two main difficulties that RNNs face:


Unstable gradients (discussed in Chapter 11), which can be alleviated using various techniques, including recurrent dropout and recurrent layer normalization


A (very) limited ...


Get Hands-On Machine Learning with Scikit-Learn, Keras, and TensorFlow, 2nd Edition now with the O’Reilly learning platform.
O’Reilly members experience books, live events, courses curated by job role, and more from O’Reilly and nearly 200 top publishers.

Start your free trial












About O’Reilly

Teach/write/train
Careers
Press releases
Media coverage
Community partners
Affiliate program
Submit an RFP
Diversity
O’Reilly for marketers





Support

Contact us
Newsletters
Privacy policy


linkedin-logo
youtube-logo


International

Australia & New Zealand
Hong Kong & Taiwan
India
Indonesia
Japan





Download the O’Reilly App
Take O’Reilly with you and learn anywhere, anytime on your phone and tablet.






Watch on your big screen
View all O’Reilly videos, Superstream events, and Meet the Expert sessions on your home TV.






Do not sell my personal information






© 2024, O’Reilly Media, Inc. All trademarks and registered trademarks appearing on oreilly.com are the property of their respective owners.
We are a participant in the Amazon Services LLC Associates Program, an affiliate advertising program designed to provide a means for us to earn fees by linking to Amazon.com and affiliated sites.
Terms of service • Privacy policy • Editorial independence







Don’t leave empty-handed
Get Mark Richards’s Software Architecture Patterns ebook to better understand how to design components—and how they should interact.
It’s yours, free.
Get it now



Close






Check it out now on O’Reilly
Dive in for free with a 10-day trial of the O’Reilly learning platform—then explore all the other resources our members count on to build skills and solve problems every day.
Start your free trial
Become a member now



Close































16. Natural Language Processing with RNNs and Attention - Hands-On Machine Learning with Scikit-Learn, Keras, and TensorFlow, 2nd Edition [Book]






























Skip to main content













Sign In
Try Now




Teams

For business
For government
For higher ed


Individuals
Features

All features
Courses
Certifications
Interactive learning
Live events
Answers
Insights reporting


Blog
Content sponsorship



















Hands-On Machine Learning with Scikit-Learn, Keras, and TensorFlow, 2nd Edition by Aurélien Géron




Buy on Amazon







Get full access to Hands-On Machine Learning with Scikit-Learn, Keras, and TensorFlow, 2nd Edition and 60K+ other titles, with a free 10-day trial of O'Reilly.
There are also live events, courses curated by job role, and more.

Start your free trial










Chapter 16. Natural Language Processing with RNNs and Attention
When Alan Turing imagined his famous Turing test1 in 1950, his objective was to evaluate a machine’s ability to match human intelligence. He could have tested for many things, such as the ability to recognize cats in pictures, play chess, compose music, or escape a maze, but, interestingly, he chose a linguistic task. More specifically, he devised a chatbot capable of fooling its interlocutor into thinking it was human.2 This test does have its weaknesses: a set of hardcoded rules can fool unsuspecting or naive humans (e.g., the machine could give vague predefined answers in response to some keywords; it could pretend that it is joking or drunk, to get a pass on its weirdest answers; or it could escape difficult questions by answering them with its own questions), and many aspects of human intelligence are utterly ignored (e.g., the ability to interpret nonverbal communication such as facial expressions, or to learn a manual task). But the test does highlight the fact that mastering language is arguably Homo sapiens’s greatest cognitive ability. Can we build a machine that can read and write natural language?
A common approach for natural language tasks is to use recurrent neural networks. We will therefore continue to explore RNNs (introduced in Chapter 15), starting with a character RNN, trained to predict the next character in a sentence. This will allow us to generate some original text, and in the process we ...


Get Hands-On Machine Learning with Scikit-Learn, Keras, and TensorFlow, 2nd Edition now with the O’Reilly learning platform.
O’Reilly members experience books, live events, courses curated by job role, and more from O’Reilly and nearly 200 top publishers.

Start your free trial












About O’Reilly

Teach/write/train
Careers
Press releases
Media coverage
Community partners
Affiliate program
Submit an RFP
Diversity
O’Reilly for marketers





Support

Contact us
Newsletters
Privacy policy


linkedin-logo
youtube-logo


International

Australia & New Zealand
Hong Kong & Taiwan
India
Indonesia
Japan





Download the O’Reilly App
Take O’Reilly with you and learn anywhere, anytime on your phone and tablet.






Watch on your big screen
View all O’Reilly videos, Superstream events, and Meet the Expert sessions on your home TV.






Do not sell my personal information






© 2024, O’Reilly Media, Inc. All trademarks and registered trademarks appearing on oreilly.com are the property of their respective owners.
We are a participant in the Amazon Services LLC Associates Program, an affiliate advertising program designed to provide a means for us to earn fees by linking to Amazon.com and affiliated sites.
Terms of service • Privacy policy • Editorial independence







Don’t leave empty-handed
Get Mark Richards’s Software Architecture Patterns ebook to better understand how to design components—and how they should interact.
It’s yours, free.
Get it now



Close






Check it out now on O’Reilly
Dive in for free with a 10-day trial of the O’Reilly learning platform—then explore all the other resources our members count on to build skills and solve problems every day.
Start your free trial
Become a member now



Close































17. Representation Learning and Generative Learning Using Autoencoders and GANs - Hands-On Machine Learning with Scikit-Learn, Keras, and TensorFlow, 2nd Edition [Book]






























Skip to main content













Sign In
Try Now




Teams

For business
For government
For higher ed


Individuals
Features

All features
Courses
Certifications
Interactive learning
Live events
Answers
Insights reporting


Blog
Content sponsorship



















Hands-On Machine Learning with Scikit-Learn, Keras, and TensorFlow, 2nd Edition by Aurélien Géron




Buy on Amazon







Get full access to Hands-On Machine Learning with Scikit-Learn, Keras, and TensorFlow, 2nd Edition and 60K+ other titles, with a free 10-day trial of O'Reilly.
There are also live events, courses curated by job role, and more.

Start your free trial










Chapter 17. Representation Learning and Generative Learning Using Autoencoders and GANs
Autoencoders are artificial neural networks capable of learning dense representations of the input data, called latent representations or codings, without any supervision (i.e., the training set is unlabeled). These codings typically have a much lower dimensionality than the input data, making autoencoders useful for dimensionality reduction (see Chapter 8), especially for visualization purposes. Autoencoders also act as feature detectors, and they can be used for unsupervised pretraining of deep neural networks (as we discussed in Chapter 11). Lastly, some autoencoders are generative models: they are capable of randomly generating new data that looks very similar to the training data. For example, you could train an autoencoder on pictures of faces, and it would then be able to generate new faces. However, the generated images are usually fuzzy and not entirely realistic.
In contrast, faces generated by generative adversarial networks (GANs) are now so convincing that it is hard to believe that the people they represent do not exist. You can judge so for yourself by visiting https://thispersondoesnotexist.com/, a website that shows faces generated by a recent GAN architecture called StyleGAN (you can also check out https://thisrentaldoesnotexist.com/ to see some generated Airbnb bedrooms). GANs are now widely used for super resolution (increasing the resolution of an image), colorization


Get Hands-On Machine Learning with Scikit-Learn, Keras, and TensorFlow, 2nd Edition now with the O’Reilly learning platform.
O’Reilly members experience books, live events, courses curated by job role, and more from O’Reilly and nearly 200 top publishers.

Start your free trial












About O’Reilly

Teach/write/train
Careers
Press releases
Media coverage
Community partners
Affiliate program
Submit an RFP
Diversity
O’Reilly for marketers





Support

Contact us
Newsletters
Privacy policy


linkedin-logo
youtube-logo


International

Australia & New Zealand
Hong Kong & Taiwan
India
Indonesia
Japan





Download the O’Reilly App
Take O’Reilly with you and learn anywhere, anytime on your phone and tablet.






Watch on your big screen
View all O’Reilly videos, Superstream events, and Meet the Expert sessions on your home TV.






Do not sell my personal information






© 2024, O’Reilly Media, Inc. All trademarks and registered trademarks appearing on oreilly.com are the property of their respective owners.
We are a participant in the Amazon Services LLC Associates Program, an affiliate advertising program designed to provide a means for us to earn fees by linking to Amazon.com and affiliated sites.
Terms of service • Privacy policy • Editorial independence







Don’t leave empty-handed
Get Mark Richards’s Software Architecture Patterns ebook to better understand how to design components—and how they should interact.
It’s yours, free.
Get it now



Close






Check it out now on O’Reilly
Dive in for free with a 10-day trial of the O’Reilly learning platform—then explore all the other resources our members count on to build skills and solve problems every day.
Start your free trial
Become a member now



Close































18. Reinforcement Learning - Hands-On Machine Learning with Scikit-Learn, Keras, and TensorFlow, 2nd Edition [Book]






























Skip to main content













Sign In
Try Now




Teams

For business
For government
For higher ed


Individuals
Features

All features
Courses
Certifications
Interactive learning
Live events
Answers
Insights reporting


Blog
Content sponsorship



















Hands-On Machine Learning with Scikit-Learn, Keras, and TensorFlow, 2nd Edition by Aurélien Géron




Buy on Amazon







Get full access to Hands-On Machine Learning with Scikit-Learn, Keras, and TensorFlow, 2nd Edition and 60K+ other titles, with a free 10-day trial of O'Reilly.
There are also live events, courses curated by job role, and more.

Start your free trial










Chapter 18. Reinforcement Learning
Reinforcement Learning (RL) is one of the most exciting fields of Machine Learning today, and also one of the oldest. It has been around since the 1950s, producing many interesting applications over the years,1 particularly in games (e.g., TD-Gammon, a Backgammon-playing program) and in machine control, but seldom making the headline news. But a revolution took place in 2013, when researchers from a British startup called DeepMind demonstrated a system that could learn to play just about any Atari game from scratch,2 eventually outperforming humans3 in most of them, using only raw pixels as inputs and without any prior knowledge of the rules of the games.4 This was the first of a series of amazing feats, culminating in March 2016 with the victory of their system AlphaGo against Lee Sedol, a legendary professional player of the game of Go, and in May 2017 against Ke Jie, the world champion. No program had ever come close to beating a master of this game, let alone the world champion. Today the whole field of RL is boiling with new ideas, with a wide range of applications. DeepMind was bought by Google for over $500 million in 2014.
So how did DeepMind achieve all this? With hindsight it seems rather simple: they applied the power of Deep Learning to the field of Reinforcement Learning, and it worked beyond their wildest dreams. In this chapter we will first explain what Reinforcement Learning is and what it’s good at, then present two of the most ...


Get Hands-On Machine Learning with Scikit-Learn, Keras, and TensorFlow, 2nd Edition now with the O’Reilly learning platform.
O’Reilly members experience books, live events, courses curated by job role, and more from O’Reilly and nearly 200 top publishers.

Start your free trial












About O’Reilly

Teach/write/train
Careers
Press releases
Media coverage
Community partners
Affiliate program
Submit an RFP
Diversity
O’Reilly for marketers





Support

Contact us
Newsletters
Privacy policy


linkedin-logo
youtube-logo


International

Australia & New Zealand
Hong Kong & Taiwan
India
Indonesia
Japan





Download the O’Reilly App
Take O’Reilly with you and learn anywhere, anytime on your phone and tablet.






Watch on your big screen
View all O’Reilly videos, Superstream events, and Meet the Expert sessions on your home TV.






Do not sell my personal information






© 2024, O’Reilly Media, Inc. All trademarks and registered trademarks appearing on oreilly.com are the property of their respective owners.
We are a participant in the Amazon Services LLC Associates Program, an affiliate advertising program designed to provide a means for us to earn fees by linking to Amazon.com and affiliated sites.
Terms of service • Privacy policy • Editorial independence







Don’t leave empty-handed
Get Mark Richards’s Software Architecture Patterns ebook to better understand how to design components—and how they should interact.
It’s yours, free.
Get it now



Close






Check it out now on O’Reilly
Dive in for free with a 10-day trial of the O’Reilly learning platform—then explore all the other resources our members count on to build skills and solve problems every day.
Start your free trial
Become a member now



Close































19. Training and Deploying TensorFlow Models at Scale - Hands-On Machine Learning with Scikit-Learn, Keras, and TensorFlow, 2nd Edition [Book]






























Skip to main content













Sign In
Try Now




Teams

For business
For government
For higher ed


Individuals
Features

All features
Courses
Certifications
Interactive learning
Live events
Answers
Insights reporting


Blog
Content sponsorship



















Hands-On Machine Learning with Scikit-Learn, Keras, and TensorFlow, 2nd Edition by Aurélien Géron




Buy on Amazon







Get full access to Hands-On Machine Learning with Scikit-Learn, Keras, and TensorFlow, 2nd Edition and 60K+ other titles, with a free 10-day trial of O'Reilly.
There are also live events, courses curated by job role, and more.

Start your free trial










Chapter 19. Training and Deploying TensorFlow Models at Scale
Once you have a beautiful model that makes amazing predictions, what do you do with it? Well, you need to put it in production! This could be as simple as running the model on a batch of data and perhaps writing a script that runs this model every night. However, it is often much more involved. Various parts of your infrastructure may need to use this model on live data, in which case you probably want to wrap your model in a web service: this way, any part of your infrastructure can query your model at any time using a simple REST API (or some other protocol), as we discussed in Chapter 2. But as time passes, you need to regularly retrain your model on fresh data and push the updated version to production. You must handle model versioning, gracefully transition from one model to the next, possibly roll back to the previous model in case of problems, and perhaps run multiple different models in parallel to perform A/B experiments.1 If your product becomes successful, your service may start to get plenty of queries per second (QPS), and it must scale up to support the load. A great solution to scale up your service, as we will see in this chapter, is to use TF Serving, either on your own hardware infrastructure or via a cloud service such as Google Cloud AI Platform. It will take care of efficiently serving your model, handle graceful model transitions, and more. If you use the cloud platform, you will also get many ...


Get Hands-On Machine Learning with Scikit-Learn, Keras, and TensorFlow, 2nd Edition now with the O’Reilly learning platform.
O’Reilly members experience books, live events, courses curated by job role, and more from O’Reilly and nearly 200 top publishers.

Start your free trial












About O’Reilly

Teach/write/train
Careers
Press releases
Media coverage
Community partners
Affiliate program
Submit an RFP
Diversity
O’Reilly for marketers





Support

Contact us
Newsletters
Privacy policy


linkedin-logo
youtube-logo


International

Australia & New Zealand
Hong Kong & Taiwan
India
Indonesia
Japan





Download the O’Reilly App
Take O’Reilly with you and learn anywhere, anytime on your phone and tablet.






Watch on your big screen
View all O’Reilly videos, Superstream events, and Meet the Expert sessions on your home TV.






Do not sell my personal information






© 2024, O’Reilly Media, Inc. All trademarks and registered trademarks appearing on oreilly.com are the property of their respective owners.
We are a participant in the Amazon Services LLC Associates Program, an affiliate advertising program designed to provide a means for us to earn fees by linking to Amazon.com and affiliated sites.
Terms of service • Privacy policy • Editorial independence







Don’t leave empty-handed
Get Mark Richards’s Software Architecture Patterns ebook to better understand how to design components—and how they should interact.
It’s yours, free.
Get it now



Close






Check it out now on O’Reilly
Dive in for free with a 10-day trial of the O’Reilly learning platform—then explore all the other resources our members count on to build skills and solve problems every day.
Start your free trial
Become a member now



Close































A. Exercise Solutions - Hands-On Machine Learning with Scikit-Learn, Keras, and TensorFlow, 2nd Edition [Book]






























Skip to main content













Sign In
Try Now




Teams

For business
For government
For higher ed


Individuals
Features

All features
Courses
Certifications
Interactive learning
Live events
Answers
Insights reporting


Blog
Content sponsorship



















Hands-On Machine Learning with Scikit-Learn, Keras, and TensorFlow, 2nd Edition by Aurélien Géron




Buy on Amazon







Get full access to Hands-On Machine Learning with Scikit-Learn, Keras, and TensorFlow, 2nd Edition and 60K+ other titles, with a free 10-day trial of O'Reilly.
There are also live events, courses curated by job role, and more.

Start your free trial










Appendix A. Exercise Solutions
Note
Solutions to the coding exercises are available in the online Jupyter notebooks at https://github.com/ageron/handson-ml2.


Chapter 1: The Machine Learning Landscape


Machine Learning is about building systems that can learn from data. Learning means getting better at some task, given some performance measure.


Machine Learning is great for complex problems for which we have no algorithmic solution, to replace long lists of hand-tuned rules, to build systems that adapt to fluctuating environments, and finally to help humans learn (e.g., data mining).


A labeled training set is a training set that contains the desired solution (a.k.a. a label) for each instance.


The two most common supervised tasks are regression and classification.


Common unsupervised tasks include clustering, visualization, dimensionality reduction, and association rule learning.


Reinforcement Learning is likely to perform best if we want a robot to learn to walk in various unknown terrains, since this is typically the type of problem that Reinforcement Learning tackles. It might be possible to express the problem as a supervised or semisupervised learning problem, but it would be less natural.


If you don’t know how to define the groups, then you can use a clustering algorithm (unsupervised learning) to segment your customers into clusters of similar customers. However, if you know what groups you would like to have, then you can feed many examples of each group ...


Get Hands-On Machine Learning with Scikit-Learn, Keras, and TensorFlow, 2nd Edition now with the O’Reilly learning platform.
O’Reilly members experience books, live events, courses curated by job role, and more from O’Reilly and nearly 200 top publishers.

Start your free trial












About O’Reilly

Teach/write/train
Careers
Press releases
Media coverage
Community partners
Affiliate program
Submit an RFP
Diversity
O’Reilly for marketers





Support

Contact us
Newsletters
Privacy policy


linkedin-logo
youtube-logo


International

Australia & New Zealand
Hong Kong & Taiwan
India
Indonesia
Japan





Download the O’Reilly App
Take O’Reilly with you and learn anywhere, anytime on your phone and tablet.






Watch on your big screen
View all O’Reilly videos, Superstream events, and Meet the Expert sessions on your home TV.






Do not sell my personal information






© 2024, O’Reilly Media, Inc. All trademarks and registered trademarks appearing on oreilly.com are the property of their respective owners.
We are a participant in the Amazon Services LLC Associates Program, an affiliate advertising program designed to provide a means for us to earn fees by linking to Amazon.com and affiliated sites.
Terms of service • Privacy policy • Editorial independence







Don’t leave empty-handed
Get Mark Richards’s Software Architecture Patterns ebook to better understand how to design components—and how they should interact.
It’s yours, free.
Get it now



Close






Check it out now on O’Reilly
Dive in for free with a 10-day trial of the O’Reilly learning platform—then explore all the other resources our members count on to build skills and solve problems every day.
Start your free trial
Become a member now



Close































B. Machine Learning Project Checklist - Hands-On Machine Learning with Scikit-Learn, Keras, and TensorFlow, 2nd Edition [Book]






























Skip to main content













Sign In
Try Now




Teams

For business
For government
For higher ed


Individuals
Features

All features
Courses
Certifications
Interactive learning
Live events
Answers
Insights reporting


Blog
Content sponsorship



















Hands-On Machine Learning with Scikit-Learn, Keras, and TensorFlow, 2nd Edition by Aurélien Géron




Buy on Amazon







Get full access to Hands-On Machine Learning with Scikit-Learn, Keras, and TensorFlow, 2nd Edition and 60K+ other titles, with a free 10-day trial of O'Reilly.
There are also live events, courses curated by job role, and more.

Start your free trial










Appendix B. Machine Learning Project Checklist
This checklist can guide you through your Machine Learning projects. There are eight main steps:


Frame the problem and look at the big picture.


Get the data.


Explore the data to gain insights.


Prepare the data to better expose the underlying data patterns to Machine Learning algorithms.


Explore many different models and shortlist the best ones.


Fine-tune your models and combine them into a great solution.


Present your solution.


Launch, monitor, and maintain your system.


Obviously, you should feel free to adapt this checklist to your needs.

Frame the Problem and Look at the Big Picture


Define the objective in business terms.


How will your solution be used?


What are the current solutions/workarounds (if any)?


How should you frame this problem (supervised/unsupervised, online/offline, etc.)?


How should performance be measured?


Is the performance measure aligned with the business objective?


What would be the minimum performance needed to reach the business objective?


What are comparable problems? Can you reuse experience or tools?


Is human expertise available?


How would you solve the problem manually?


List the assumptions you (or others) have made so far.


Verify assumptions if possible.




Get the Data
Note: automate as much as possible so you can easily get fresh data.


List the data you need and how much you need.


Find and document where you can get that data.


Check how much space it ...


Get Hands-On Machine Learning with Scikit-Learn, Keras, and TensorFlow, 2nd Edition now with the O’Reilly learning platform.
O’Reilly members experience books, live events, courses curated by job role, and more from O’Reilly and nearly 200 top publishers.

Start your free trial












About O’Reilly

Teach/write/train
Careers
Press releases
Media coverage
Community partners
Affiliate program
Submit an RFP
Diversity
O’Reilly for marketers





Support

Contact us
Newsletters
Privacy policy


linkedin-logo
youtube-logo


International

Australia & New Zealand
Hong Kong & Taiwan
India
Indonesia
Japan





Download the O’Reilly App
Take O’Reilly with you and learn anywhere, anytime on your phone and tablet.






Watch on your big screen
View all O’Reilly videos, Superstream events, and Meet the Expert sessions on your home TV.






Do not sell my personal information






© 2024, O’Reilly Media, Inc. All trademarks and registered trademarks appearing on oreilly.com are the property of their respective owners.
We are a participant in the Amazon Services LLC Associates Program, an affiliate advertising program designed to provide a means for us to earn fees by linking to Amazon.com and affiliated sites.
Terms of service • Privacy policy • Editorial independence







Don’t leave empty-handed
Get Mark Richards’s Software Architecture Patterns ebook to better understand how to design components—and how they should interact.
It’s yours, free.
Get it now



Close






Check it out now on O’Reilly
Dive in for free with a 10-day trial of the O’Reilly learning platform—then explore all the other resources our members count on to build skills and solve problems every day.
Start your free trial
Become a member now



Close































C. SVM Dual Problem - Hands-On Machine Learning with Scikit-Learn, Keras, and TensorFlow, 2nd Edition [Book]






























Skip to main content













Sign In
Try Now




Teams

For business
For government
For higher ed


Individuals
Features

All features
Courses
Certifications
Interactive learning
Live events
Answers
Insights reporting


Blog
Content sponsorship



















Hands-On Machine Learning with Scikit-Learn, Keras, and TensorFlow, 2nd Edition by Aurélien Géron




Buy on Amazon







Get full access to Hands-On Machine Learning with Scikit-Learn, Keras, and TensorFlow, 2nd Edition and 60K+ other titles, with a free 10-day trial of O'Reilly.
There are also live events, courses curated by job role, and more.

Start your free trial










Appendix C. SVM Dual Problem
To understand duality, you first need to understand the Lagrange multipliers method. The general idea is to transform a constrained optimization objective into an unconstrained one, by moving the constraints into the objective function. Let’s look at a simple example. Suppose you want to find the values of x and y that minimize the function f(x, y) = x2 + 2y, subject to an equality constraint: 3x + 2y + 1 = 0. Using the Lagrange multipliers method, we start by defining a new function called the Lagrangian (or Lagrange function): g(x, y, α) = f(x, y) – α(3x + 2y + 1). Each constraint (in this case just one) is subtracted from the original objective, multiplied by a new variable called a Lagrange multiplier.
Joseph-Louis Lagrange showed that if (x^,y^) is a solution to the constrained optimization problem, then there must exist an α^ such that (x^,y^,α^) is a stationary point of the Lagrangian (a stationary point is a point where all partial derivatives are equal to zero). In other words, we can compute the partial derivatives of g(x, y, α) with regard to x, y, and α; we can find the points where these derivatives are all equal to zero; and the solutions to the constrained optimization problem (if they exist) must be among these stationary points.
In this example the partial derivatives are: ∂∂xg(x,y,α)=2x-3α∂∂yg(x,y,α)=2-2α∂∂αg(x,y,α)=-3x-2y-1
When all these partial derivatives are equal to 0, we find that 


2
x ^
-
3
α ^
=
2
-
2
α ^
=
-3
x ^
-
2



Get Hands-On Machine Learning with Scikit-Learn, Keras, and TensorFlow, 2nd Edition now with the O’Reilly learning platform.
O’Reilly members experience books, live events, courses curated by job role, and more from O’Reilly and nearly 200 top publishers.

Start your free trial












About O’Reilly

Teach/write/train
Careers
Press releases
Media coverage
Community partners
Affiliate program
Submit an RFP
Diversity
O’Reilly for marketers





Support

Contact us
Newsletters
Privacy policy


linkedin-logo
youtube-logo


International

Australia & New Zealand
Hong Kong & Taiwan
India
Indonesia
Japan





Download the O’Reilly App
Take O’Reilly with you and learn anywhere, anytime on your phone and tablet.






Watch on your big screen
View all O’Reilly videos, Superstream events, and Meet the Expert sessions on your home TV.






Do not sell my personal information






© 2024, O’Reilly Media, Inc. All trademarks and registered trademarks appearing on oreilly.com are the property of their respective owners.
We are a participant in the Amazon Services LLC Associates Program, an affiliate advertising program designed to provide a means for us to earn fees by linking to Amazon.com and affiliated sites.
Terms of service • Privacy policy • Editorial independence







Don’t leave empty-handed
Get Mark Richards’s Software Architecture Patterns ebook to better understand how to design components—and how they should interact.
It’s yours, free.
Get it now



Close






Check it out now on O’Reilly
Dive in for free with a 10-day trial of the O’Reilly learning platform—then explore all the other resources our members count on to build skills and solve problems every day.
Start your free trial
Become a member now



Close































D. Autodiff - Hands-On Machine Learning with Scikit-Learn, Keras, and TensorFlow, 2nd Edition [Book]






























Skip to main content













Sign In
Try Now




Teams

For business
For government
For higher ed


Individuals
Features

All features
Courses
Certifications
Interactive learning
Live events
Answers
Insights reporting


Blog
Content sponsorship



















Hands-On Machine Learning with Scikit-Learn, Keras, and TensorFlow, 2nd Edition by Aurélien Géron




Buy on Amazon







Get full access to Hands-On Machine Learning with Scikit-Learn, Keras, and TensorFlow, 2nd Edition and 60K+ other titles, with a free 10-day trial of O'Reilly.
There are also live events, courses curated by job role, and more.

Start your free trial










Appendix D. Autodiff
This appendix explains how TensorFlow’s autodifferentiation (autodiff) feature works, and how it compares to other solutions.
Suppose you define a function f(x, y) = x2y + y + 2, and you need its partial derivatives ∂f/∂x and ∂f/∂y, typically to perform Gradient Descent (or some other optimization algorithm). Your main options are manual differentiation, finite difference approximation, forward-mode autodiff, and reverse-mode autodiff. TensorFlow implements reverse-mode autodiff, but to understand it, it’s useful to look at the other options first. So let’s go through each of them, starting with manual differentiation.

Manual Differentiation
The first approach to compute derivatives is to pick up a pencil and a piece of paper and use your calculus knowledge to derive the appropriate equation. For the function f(x, y) just defined, it is not too hard; you just need to use five rules:


The derivative of a constant is 0.


The derivative of λx is λ (where λ is a constant).


The derivative of xλ is λxλ – 1, so the derivative of x2 is 2x.


The derivative of a sum of functions is the sum of these functions’ derivatives.


The derivative of λ times a function is λ times its derivative.


From these rules, you can derive Equation D-1.

Equation D-1. Partial derivatives of f(x, y)





∂f ∂x




=

∂(x 2 y) ∂x

+

∂y ∂x

+

∂2 ∂x

=
y

∂(x 2 ) ∂x

+
0
+
0
=
2
x
y






∂f ∂y




=

∂(x 2 y) ∂y

+

∂y ∂y

+

∂2 ∂y

=
x 2 
+
1
+
0
=
x 2 
+
1






This approach can ...


Get Hands-On Machine Learning with Scikit-Learn, Keras, and TensorFlow, 2nd Edition now with the O’Reilly learning platform.
O’Reilly members experience books, live events, courses curated by job role, and more from O’Reilly and nearly 200 top publishers.

Start your free trial












About O’Reilly

Teach/write/train
Careers
Press releases
Media coverage
Community partners
Affiliate program
Submit an RFP
Diversity
O’Reilly for marketers





Support

Contact us
Newsletters
Privacy policy


linkedin-logo
youtube-logo


International

Australia & New Zealand
Hong Kong & Taiwan
India
Indonesia
Japan





Download the O’Reilly App
Take O’Reilly with you and learn anywhere, anytime on your phone and tablet.






Watch on your big screen
View all O’Reilly videos, Superstream events, and Meet the Expert sessions on your home TV.






Do not sell my personal information






© 2024, O’Reilly Media, Inc. All trademarks and registered trademarks appearing on oreilly.com are the property of their respective owners.
We are a participant in the Amazon Services LLC Associates Program, an affiliate advertising program designed to provide a means for us to earn fees by linking to Amazon.com and affiliated sites.
Terms of service • Privacy policy • Editorial independence







Don’t leave empty-handed
Get Mark Richards’s Software Architecture Patterns ebook to better understand how to design components—and how they should interact.
It’s yours, free.
Get it now



Close






Check it out now on O’Reilly
Dive in for free with a 10-day trial of the O’Reilly learning platform—then explore all the other resources our members count on to build skills and solve problems every day.
Start your free trial
Become a member now



Close































E. Other Popular ANN Architectures - Hands-On Machine Learning with Scikit-Learn, Keras, and TensorFlow, 2nd Edition [Book]






























Skip to main content













Sign In
Try Now




Teams

For business
For government
For higher ed


Individuals
Features

All features
Courses
Certifications
Interactive learning
Live events
Answers
Insights reporting


Blog
Content sponsorship



















Hands-On Machine Learning with Scikit-Learn, Keras, and TensorFlow, 2nd Edition by Aurélien Géron




Buy on Amazon







Get full access to Hands-On Machine Learning with Scikit-Learn, Keras, and TensorFlow, 2nd Edition and 60K+ other titles, with a free 10-day trial of O'Reilly.
There are also live events, courses curated by job role, and more.

Start your free trial










Appendix E. Other Popular ANN Architectures
In this appendix I will give a quick overview of a few historically important neural network architectures that are much less used today than deep Multilayer Perceptrons (Chapter 10), convolutional neural networks (Chapter 14), recurrent neural networks (Chapter 15), or autoencoders (Chapter 17). They are often mentioned in the literature, and some are still used in a range of applications, so it is worth knowing about them. Additionally, we will discuss deep belief nets, which were the state of the art in Deep Learning until the early 2010s. They are still the subject of very active research, so they may well come back with a vengeance in the future.

Hopfield Networks
Hopfield networks were first introduced by W. A. Little in 1974, then popularized by J. Hopfield in 1982. They are associative memory networks: you first teach them some patterns, and then when they see a new pattern they (hopefully) output the closest learned pattern. This made them useful for character recognition, in particular, before they were outperformed by other approaches: you first train the network by showing it examples of character images (each binary pixel maps to one neuron), and then when you show it a new character image, after a few iterations it outputs the closest learned character.
Hopfield networks are fully connected graphs (see Figure E-1); that is, every neuron is connected to every other neuron. Note that in the diagram the images are 6 × 6 pixels, ...


Get Hands-On Machine Learning with Scikit-Learn, Keras, and TensorFlow, 2nd Edition now with the O’Reilly learning platform.
O’Reilly members experience books, live events, courses curated by job role, and more from O’Reilly and nearly 200 top publishers.

Start your free trial












About O’Reilly

Teach/write/train
Careers
Press releases
Media coverage
Community partners
Affiliate program
Submit an RFP
Diversity
O’Reilly for marketers





Support

Contact us
Newsletters
Privacy policy


linkedin-logo
youtube-logo


International

Australia & New Zealand
Hong Kong & Taiwan
India
Indonesia
Japan





Download the O’Reilly App
Take O’Reilly with you and learn anywhere, anytime on your phone and tablet.






Watch on your big screen
View all O’Reilly videos, Superstream events, and Meet the Expert sessions on your home TV.






Do not sell my personal information






© 2024, O’Reilly Media, Inc. All trademarks and registered trademarks appearing on oreilly.com are the property of their respective owners.
We are a participant in the Amazon Services LLC Associates Program, an affiliate advertising program designed to provide a means for us to earn fees by linking to Amazon.com and affiliated sites.
Terms of service • Privacy policy • Editorial independence







Don’t leave empty-handed
Get Mark Richards’s Software Architecture Patterns ebook to better understand how to design components—and how they should interact.
It’s yours, free.
Get it now



Close






Check it out now on O’Reilly
Dive in for free with a 10-day trial of the O’Reilly learning platform—then explore all the other resources our members count on to build skills and solve problems every day.
Start your free trial
Become a member now



Close































F. Special Data Structures - Hands-On Machine Learning with Scikit-Learn, Keras, and TensorFlow, 2nd Edition [Book]






























Skip to main content













Sign In
Try Now




Teams

For business
For government
For higher ed


Individuals
Features

All features
Courses
Certifications
Interactive learning
Live events
Answers
Insights reporting


Blog
Content sponsorship



















Hands-On Machine Learning with Scikit-Learn, Keras, and TensorFlow, 2nd Edition by Aurélien Géron




Buy on Amazon







Get full access to Hands-On Machine Learning with Scikit-Learn, Keras, and TensorFlow, 2nd Edition and 60K+ other titles, with a free 10-day trial of O'Reilly.
There are also live events, courses curated by job role, and more.

Start your free trial










Appendix F. Special Data Structures
In this appendix we will take a very quick look at the data structures supported by TensorFlow, beyond regular float or integer tensors. This includes strings, ragged tensors, sparse tensors, tensor arrays, sets, and queues.

Strings
Tensors can hold byte strings, which is useful in particular for natural language processing (see Chapter 16):
>>> tf.constant(b"hello world")
<tf.Tensor: id=149, shape=(), dtype=string, numpy=b'hello world'>
If you try to build a tensor with a Unicode string, TensorFlow automatically encodes it to UTF-8:
>>> tf.constant("café")
<tf.Tensor: id=138, shape=(), dtype=string, numpy=b'caf\xc3\xa9'>
It is also possible to create tensors representing Unicode strings. Just create an array of 32-bit integers, each representing a single Unicode code point:1
>>> tf.constant([ord(c) for c in "café"])
<tf.Tensor: id=211, shape=(4,), dtype=int32,
            numpy=array([ 99,  97, 102, 233], dtype=int32)>
Note
In tensors of type tf.string, the string length is not part of the tensor’s shape. In other words, strings are considered as atomic values. However, in a Unicode string tensor (i.e., an int32 tensor), the length of the string is part of the tensor’s shape.

The tf.strings package contains several functions to manipulate string tensors, such as length() to count the number of bytes in a byte string (or the number of code points if you set unit="UTF8_CHAR"), unicode_encode() to convert a Unicode string tensor (i.e., int32 tensor) to ...


Get Hands-On Machine Learning with Scikit-Learn, Keras, and TensorFlow, 2nd Edition now with the O’Reilly learning platform.
O’Reilly members experience books, live events, courses curated by job role, and more from O’Reilly and nearly 200 top publishers.

Start your free trial












About O’Reilly

Teach/write/train
Careers
Press releases
Media coverage
Community partners
Affiliate program
Submit an RFP
Diversity
O’Reilly for marketers





Support

Contact us
Newsletters
Privacy policy


linkedin-logo
youtube-logo


International

Australia & New Zealand
Hong Kong & Taiwan
India
Indonesia
Japan





Download the O’Reilly App
Take O’Reilly with you and learn anywhere, anytime on your phone and tablet.






Watch on your big screen
View all O’Reilly videos, Superstream events, and Meet the Expert sessions on your home TV.






Do not sell my personal information






© 2024, O’Reilly Media, Inc. All trademarks and registered trademarks appearing on oreilly.com are the property of their respective owners.
We are a participant in the Amazon Services LLC Associates Program, an affiliate advertising program designed to provide a means for us to earn fees by linking to Amazon.com and affiliated sites.
Terms of service • Privacy policy • Editorial independence







Don’t leave empty-handed
Get Mark Richards’s Software Architecture Patterns ebook to better understand how to design components—and how they should interact.
It’s yours, free.
Get it now



Close






Check it out now on O’Reilly
Dive in for free with a 10-day trial of the O’Reilly learning platform—then explore all the other resources our members count on to build skills and solve problems every day.
Start your free trial
Become a member now



Close































G. TensorFlow Graphs - Hands-On Machine Learning with Scikit-Learn, Keras, and TensorFlow, 2nd Edition [Book]






























Skip to main content













Sign In
Try Now




Teams

For business
For government
For higher ed


Individuals
Features

All features
Courses
Certifications
Interactive learning
Live events
Answers
Insights reporting


Blog
Content sponsorship



















Hands-On Machine Learning with Scikit-Learn, Keras, and TensorFlow, 2nd Edition by Aurélien Géron




Buy on Amazon







Get full access to Hands-On Machine Learning with Scikit-Learn, Keras, and TensorFlow, 2nd Edition and 60K+ other titles, with a free 10-day trial of O'Reilly.
There are also live events, courses curated by job role, and more.

Start your free trial










Appendix G. TensorFlow Graphs
In this appendix, we will explore the graphs generated by TF Functions (see Chapter 12).

TF Functions and Concrete Functions
TF Functions are polymorphic, meaning they support inputs of different types (and shapes). For example, consider the following tf_cube() function:
@tf.function
def tf_cube(x):
    return x ** 3
Every time you call a TF Function with a new combination of input types or shapes, it generates a new concrete function, with its own graph specialized for this particular combination. Such a combination of argument types and shapes is called an input signature. If you call the TF Function with an input signature it has already seen before, it will reuse the concrete function it generated earlier. For example, if you call tf_cube(tf.constant(3.0)), the TF Function will reuse the same concrete function it used for tf_cube(tf.constant(2.0)) (for float32 scalar tensors). But it will generate a new concrete function if you call tf_cube(tf.constant([2.0])) or tf_cube(tf.constant([3.0])) (for float32 tensors of shape [1]), and yet another for tf_cube(tf.constant([[1.0, 2.0], [3.0, 4.0]])) (for float32 tensors of shape [2, 2]). You can get the concrete function for a particular combination of inputs by calling the TF Function’s get_concrete_function() method. It can then be called like a regular function, but it will only support one input signature (in this example, float32 scalar tensors):
>>> concrete_function = tf_cube.get_concrete_function ...


Get Hands-On Machine Learning with Scikit-Learn, Keras, and TensorFlow, 2nd Edition now with the O’Reilly learning platform.
O’Reilly members experience books, live events, courses curated by job role, and more from O’Reilly and nearly 200 top publishers.

Start your free trial












About O’Reilly

Teach/write/train
Careers
Press releases
Media coverage
Community partners
Affiliate program
Submit an RFP
Diversity
O’Reilly for marketers





Support

Contact us
Newsletters
Privacy policy


linkedin-logo
youtube-logo


International

Australia & New Zealand
Hong Kong & Taiwan
India
Indonesia
Japan





Download the O’Reilly App
Take O’Reilly with you and learn anywhere, anytime on your phone and tablet.






Watch on your big screen
View all O’Reilly videos, Superstream events, and Meet the Expert sessions on your home TV.






Do not sell my personal information






© 2024, O’Reilly Media, Inc. All trademarks and registered trademarks appearing on oreilly.com are the property of their respective owners.
We are a participant in the Amazon Services LLC Associates Program, an affiliate advertising program designed to provide a means for us to earn fees by linking to Amazon.com and affiliated sites.
Terms of service • Privacy policy • Editorial independence







Don’t leave empty-handed
Get Mark Richards’s Software Architecture Patterns ebook to better understand how to design components—and how they should interact.
It’s yours, free.
Get it now



Close






Check it out now on O’Reilly
Dive in for free with a 10-day trial of the O’Reilly learning platform—then explore all the other resources our members count on to build skills and solve problems every day.
Start your free trial
Become a member now



Close































Introduction to Machine Learning with Python [Book]





























Skip to main content













Sign In
Try Now




Teams

For business
For government
For higher ed


Individuals
Features

All features
Courses
Certifications
Interactive learning
Live events
Answers
Insights reporting


Blog
Content sponsorship


















Get full access to Introduction to Machine Learning with Python and 60K+ other titles, with a free 10-day trial of O'Reilly.
There are also live events, courses curated by job role, and more.

Start your free trial













Introduction to Machine Learning with Python
by
            
              Andreas C. Müller,
            
              Sarah Guido

Released September 2016
Publisher(s): O'Reilly Media, Inc.
ISBN: 9781449369897

Read it now on the O’Reilly learning platform with a 10-day free trial.
O’Reilly members get unlimited access to books, live events, courses curated by job role, and more from O’Reilly and nearly 200 top publishers.


Start your free trial








Book description
Machine learning has become an integral part of many commercial applications and research projects, but this field is not exclusive to large companies with extensive research teams. If you use Python, even as a beginner, this book will teach you practical ways to build your own machine learning solutions. With all the data available today, machine learning applications are limited only by your imagination.You’ll learn the steps necessary to create a successful machine-learning application with Python and the scikit-learn library. Authors Andreas Müller and Sarah Guido focus on the practical aspects of using machine learning algorithms, rather than the math behind them. Familiarity with the NumPy and matplotlib libraries will help you get even more from this book.With this book, you’ll learn:Fundamental concepts and applications of machine learningAdvantages and shortcomings of widely used machine learning algorithmsHow to represent data processed by machine learning, including which data aspects to focus onAdvanced methods for model evaluation and parameter tuningThe concept of pipelines for chaining models and encapsulating your workflowMethods for working with text data, including text-specific processing techniquesSuggestions for improving your machine learning and data science skills
Show and hide more

Publisher resources
View/Submit Errata




Table of contentsProduct information


Table of contents


Preface


Who Should Read This Book


Why We Wrote This Book


Navigating This Book


Online Resources


Conventions Used in This Book


Using Code Examples


O’Reilly Safari


How to Contact Us


Acknowledgments


From Andreas


From Sarah






1. Introduction


1.1. Why Machine Learning?


1.1.1. Problems Machine Learning Can Solve


1.1.2. Knowing Your Task and Knowing Your Data




1.2. Why Python?


1.3. scikit-learn


1.3.1. Installing scikit-learn




1.4. Essential Libraries and Tools


1.4.1. Jupyter Notebook


1.4.2. NumPy


1.4.3. SciPy


1.4.4. matplotlib


1.4.5. pandas


1.4.6. mglearn




1.5. Python 2 Versus Python 3


1.6. Versions Used in this Book


1.7. A First Application: Classifying Iris Species


1.7.1. Meet the Data


1.7.2. Measuring Success: Training and Testing Data


1.7.3. First Things First: Look at Your Data


1.7.4. Building Your First Model: k-Nearest Neighbors


1.7.5. Making Predictions


1.7.6. Evaluating the Model




1.8. Summary and Outlook




2. Supervised Learning


2.1. Classification and Regression


2.2. Generalization, Overfitting, and Underfitting


2.2.1. Relation of Model Complexity to Dataset Size




2.3. Supervised Machine Learning Algorithms


2.3.1. Some Sample Datasets


2.3.2. k-Nearest Neighbors


2.3.3. Linear Models


2.3.4. Naive Bayes Classifiers


2.3.5. Decision Trees


2.3.6. Ensembles of Decision Trees


2.3.7. Kernelized Support Vector Machines


2.3.8. Neural Networks (Deep Learning)




2.4. Uncertainty Estimates from Classifiers


2.4.1. The Decision Function


2.4.2. Predicting Probabilities


2.4.3. Uncertainty in Multiclass Classification




2.5. Summary and Outlook




3. Unsupervised Learning and Preprocessing


3.1. Types of Unsupervised Learning


3.2. Challenges in Unsupervised Learning


3.3. Preprocessing and Scaling


3.3.1. Different Kinds of Preprocessing


3.3.2. Applying Data Transformations


3.3.3. Scaling Training and Test Data the Same Way


3.3.4. The Effect of Preprocessing on Supervised Learning




3.4. Dimensionality Reduction, Feature Extraction, and Manifold Learning


3.4.1. Principal Component Analysis (PCA)


3.4.2. Non-Negative Matrix Factorization (NMF)


3.4.3. Manifold Learning with t-SNE




3.5. Clustering


3.5.1. k-Means Clustering


3.5.2. Agglomerative Clustering


3.5.3. DBSCAN


3.5.4. Comparing and Evaluating Clustering Algorithms


3.5.5. Summary of Clustering Methods




3.6. Summary and Outlook




4. Representing Data and Engineering Features


4.1. Categorical Variables


4.1.1. One-Hot-Encoding (Dummy Variables)


4.1.2. Numbers Can Encode Categoricals




4.2. OneHotEncoder and ColumnTransformer: Categorical Variables with scikit-learn


4.3. Convenient ColumnTransformer creation with make_columntransformer


4.4. Binning, Discretization, Linear Models, and Trees


4.5. Interactions and Polynomials


4.6. Univariate Nonlinear Transformations


4.7. Automatic Feature Selection


4.7.1. Univariate Statistics


4.7.2. Model-Based Feature Selection


4.7.3. Iterative Feature Selection




4.8. Utilizing Expert Knowledge


4.9. Summary and Outlook




5. Model Evaluation and Improvement


5.1. Cross-Validation


5.1.1. Cross-Validation in scikit-learn


5.1.2. Benefits of Cross-Validation


5.1.3. Stratified k-Fold Cross-Validation and Other Strategies




5.2. Grid Search


5.2.1. Simple Grid Search


5.2.2. The Danger of Overfitting the Parameters and the Validation Set


5.2.3. Grid Search with Cross-Validation




5.3. Evaluation Metrics and Scoring


5.3.1. Keep the End Goal in Mind


5.3.2. Metrics for Binary Classification


5.3.3. Metrics for Multiclass Classification


5.3.4. Regression Metrics


5.3.5. Using Evaluation Metrics in Model Selection




5.4. Summary and Outlook




6. Algorithm Chains and Pipelines


6.1. Parameter Selection with Preprocessing


6.2. Building Pipelines


6.3. Using Pipelines in Grid Searches


6.4. The General Pipeline Interface


6.4.1. Convenient Pipeline Creation with make_pipeline


6.4.2. Accessing Step Attributes


6.4.3. Accessing Attributes in a Pipeline inside GridSearchCV




6.5. Grid-Searching Preprocessing Steps and Model Parameters


6.6. Grid-Searching Which Model To Use


6.6.1. Avoiding Redundant Computation




6.7. Summary and Outlook




7. Working with Text Data


7.1. Types of Data Represented as Strings


7.2. Example Application: Sentiment Analysis of Movie Reviews


7.3. Representing Text Data as a Bag of Words


7.3.1. Applying Bag-of-Words to a Toy Dataset


7.3.2. Bag-of-Words for Movie Reviews




7.4. Stopwords


7.5. Rescaling the Data with tf–idf


7.6. Investigating Model Coefficients


7.7. Bag-of-Words with More Than One Word (n-Grams)


7.8. Advanced Tokenization, Stemming, and Lemmatization


7.9. Topic Modeling and Document Clustering


7.9.1. Latent Dirichlet Allocation




7.10. Summary and Outlook




8. Wrapping Up


8.1. Approaching a Machine Learning Problem


8.1.1. Humans in the Loop




8.2. From Prototype to Production


8.3. Testing Production Systems


8.4. Building Your Own Estimator


8.5. Where to Go from Here


8.5.1. Theory


8.5.2. Other Machine Learning Frameworks and Packages


8.5.3. Ranking, Recommender Systems, and Other Kinds of Learning


8.5.4. Probabilistic Modeling, Inference, and Probabilistic Programming


8.5.5. Neural Networks


8.5.6. Scaling to Larger Datasets


8.5.7. Honing Your Skills




8.6. Conclusion




Index


Show and hide more




Product information

Title: Introduction to Machine Learning with Python
Author(s): Andreas C. Müller, Sarah Guido
Release date: September 2016
Publisher(s): O'Reilly Media, Inc.
ISBN: 9781449369897





You might also like



video
Machine Learning, Data Science and Generative AI with Python

            by
            
              Frank Kane
            
          
This course begins with a Python crash course and then guides you on setting up Microsoft …



book
Machine Learning with Python for Everyone

            by
            
              Mark Fenner
            
          
The Complete Beginner's Guide to Understanding and Building Machine Learning Systems with Python will help you …



book
Python Machine Learning - Third Edition

            by
            
              Sebastian Raschka,
            
              Vahid Mirjalili
            
          
Applied machine learning with a solid foundation in theory. Revised and expanded for TensorFlow 2, GANs, …



book
Machine Learning with Python Cookbook, 2nd Edition

            by
            
              Kyle Gallatin,
            
              Chris Albon
            
          
This practical guide provides more than 200 self-contained recipes to help you solve machine learning challenges …













About O’Reilly

Teach/write/train
Careers
Press releases
Media coverage
Community partners
Affiliate program
Submit an RFP
Diversity
O’Reilly for marketers





Support

Contact us
Newsletters
Privacy policy


linkedin-logo
youtube-logo


International

Australia & New Zealand
Hong Kong & Taiwan
India
Indonesia
Japan





Download the O’Reilly App
Take O’Reilly with you and learn anywhere, anytime on your phone and tablet.






Watch on your big screen
View all O’Reilly videos, Superstream events, and Meet the Expert sessions on your home TV.






Do not sell my personal information






© 2024, O’Reilly Media, Inc. All trademarks and registered trademarks appearing on oreilly.com are the property of their respective owners.
Terms of service • Privacy policy • Editorial independence







Don’t leave empty-handed
Get Mark Richards’s Software Architecture Patterns ebook to better understand how to design components—and how they should interact.
It’s yours, free.
Get it now



Close






Check it out now on O’Reilly
Dive in for free with a 10-day trial of the O’Reilly learning platform—then explore all the other resources our members count on to build skills and solve problems every day.
Start your free trial
Become a member now



Close































Introduction to Machine Learning with Python [Book]





























Skip to main content













Sign In
Try Now




Teams

For business
For government
For higher ed


Individuals
Features

All features
Courses
Certifications
Interactive learning
Live events
Answers
Insights reporting


Blog
Content sponsorship


















Get full access to Introduction to Machine Learning with Python and 60K+ other titles, with a free 10-day trial of O'Reilly.
There are also live events, courses curated by job role, and more.

Start your free trial













Introduction to Machine Learning with Python
by
            
              Andreas C. Müller,
            
              Sarah Guido

Released September 2016
Publisher(s): O'Reilly Media, Inc.
ISBN: 9781449369897

Read it now on the O’Reilly learning platform with a 10-day free trial.
O’Reilly members get unlimited access to books, live events, courses curated by job role, and more from O’Reilly and nearly 200 top publishers.


Start your free trial








Book description
Machine learning has become an integral part of many commercial applications and research projects, but this field is not exclusive to large companies with extensive research teams. If you use Python, even as a beginner, this book will teach you practical ways to build your own machine learning solutions. With all the data available today, machine learning applications are limited only by your imagination.You’ll learn the steps necessary to create a successful machine-learning application with Python and the scikit-learn library. Authors Andreas Müller and Sarah Guido focus on the practical aspects of using machine learning algorithms, rather than the math behind them. Familiarity with the NumPy and matplotlib libraries will help you get even more from this book.With this book, you’ll learn:Fundamental concepts and applications of machine learningAdvantages and shortcomings of widely used machine learning algorithmsHow to represent data processed by machine learning, including which data aspects to focus onAdvanced methods for model evaluation and parameter tuningThe concept of pipelines for chaining models and encapsulating your workflowMethods for working with text data, including text-specific processing techniquesSuggestions for improving your machine learning and data science skills
Show and hide more

Publisher resources
View/Submit Errata




Table of contentsProduct information


Table of contents


Preface


Who Should Read This Book


Why We Wrote This Book


Navigating This Book


Online Resources


Conventions Used in This Book


Using Code Examples


O’Reilly Safari


How to Contact Us


Acknowledgments


From Andreas


From Sarah






1. Introduction


1.1. Why Machine Learning?


1.1.1. Problems Machine Learning Can Solve


1.1.2. Knowing Your Task and Knowing Your Data




1.2. Why Python?


1.3. scikit-learn


1.3.1. Installing scikit-learn




1.4. Essential Libraries and Tools


1.4.1. Jupyter Notebook


1.4.2. NumPy


1.4.3. SciPy


1.4.4. matplotlib


1.4.5. pandas


1.4.6. mglearn




1.5. Python 2 Versus Python 3


1.6. Versions Used in this Book


1.7. A First Application: Classifying Iris Species


1.7.1. Meet the Data


1.7.2. Measuring Success: Training and Testing Data


1.7.3. First Things First: Look at Your Data


1.7.4. Building Your First Model: k-Nearest Neighbors


1.7.5. Making Predictions


1.7.6. Evaluating the Model




1.8. Summary and Outlook




2. Supervised Learning


2.1. Classification and Regression


2.2. Generalization, Overfitting, and Underfitting


2.2.1. Relation of Model Complexity to Dataset Size




2.3. Supervised Machine Learning Algorithms


2.3.1. Some Sample Datasets


2.3.2. k-Nearest Neighbors


2.3.3. Linear Models


2.3.4. Naive Bayes Classifiers


2.3.5. Decision Trees


2.3.6. Ensembles of Decision Trees


2.3.7. Kernelized Support Vector Machines


2.3.8. Neural Networks (Deep Learning)




2.4. Uncertainty Estimates from Classifiers


2.4.1. The Decision Function


2.4.2. Predicting Probabilities


2.4.3. Uncertainty in Multiclass Classification




2.5. Summary and Outlook




3. Unsupervised Learning and Preprocessing


3.1. Types of Unsupervised Learning


3.2. Challenges in Unsupervised Learning


3.3. Preprocessing and Scaling


3.3.1. Different Kinds of Preprocessing


3.3.2. Applying Data Transformations


3.3.3. Scaling Training and Test Data the Same Way


3.3.4. The Effect of Preprocessing on Supervised Learning




3.4. Dimensionality Reduction, Feature Extraction, and Manifold Learning


3.4.1. Principal Component Analysis (PCA)


3.4.2. Non-Negative Matrix Factorization (NMF)


3.4.3. Manifold Learning with t-SNE




3.5. Clustering


3.5.1. k-Means Clustering


3.5.2. Agglomerative Clustering


3.5.3. DBSCAN


3.5.4. Comparing and Evaluating Clustering Algorithms


3.5.5. Summary of Clustering Methods




3.6. Summary and Outlook




4. Representing Data and Engineering Features


4.1. Categorical Variables


4.1.1. One-Hot-Encoding (Dummy Variables)


4.1.2. Numbers Can Encode Categoricals




4.2. OneHotEncoder and ColumnTransformer: Categorical Variables with scikit-learn


4.3. Convenient ColumnTransformer creation with make_columntransformer


4.4. Binning, Discretization, Linear Models, and Trees


4.5. Interactions and Polynomials


4.6. Univariate Nonlinear Transformations


4.7. Automatic Feature Selection


4.7.1. Univariate Statistics


4.7.2. Model-Based Feature Selection


4.7.3. Iterative Feature Selection




4.8. Utilizing Expert Knowledge


4.9. Summary and Outlook




5. Model Evaluation and Improvement


5.1. Cross-Validation


5.1.1. Cross-Validation in scikit-learn


5.1.2. Benefits of Cross-Validation


5.1.3. Stratified k-Fold Cross-Validation and Other Strategies




5.2. Grid Search


5.2.1. Simple Grid Search


5.2.2. The Danger of Overfitting the Parameters and the Validation Set


5.2.3. Grid Search with Cross-Validation




5.3. Evaluation Metrics and Scoring


5.3.1. Keep the End Goal in Mind


5.3.2. Metrics for Binary Classification


5.3.3. Metrics for Multiclass Classification


5.3.4. Regression Metrics


5.3.5. Using Evaluation Metrics in Model Selection




5.4. Summary and Outlook




6. Algorithm Chains and Pipelines


6.1. Parameter Selection with Preprocessing


6.2. Building Pipelines


6.3. Using Pipelines in Grid Searches


6.4. The General Pipeline Interface


6.4.1. Convenient Pipeline Creation with make_pipeline


6.4.2. Accessing Step Attributes


6.4.3. Accessing Attributes in a Pipeline inside GridSearchCV




6.5. Grid-Searching Preprocessing Steps and Model Parameters


6.6. Grid-Searching Which Model To Use


6.6.1. Avoiding Redundant Computation




6.7. Summary and Outlook




7. Working with Text Data


7.1. Types of Data Represented as Strings


7.2. Example Application: Sentiment Analysis of Movie Reviews


7.3. Representing Text Data as a Bag of Words


7.3.1. Applying Bag-of-Words to a Toy Dataset


7.3.2. Bag-of-Words for Movie Reviews




7.4. Stopwords


7.5. Rescaling the Data with tf–idf


7.6. Investigating Model Coefficients


7.7. Bag-of-Words with More Than One Word (n-Grams)


7.8. Advanced Tokenization, Stemming, and Lemmatization


7.9. Topic Modeling and Document Clustering


7.9.1. Latent Dirichlet Allocation




7.10. Summary and Outlook




8. Wrapping Up


8.1. Approaching a Machine Learning Problem


8.1.1. Humans in the Loop




8.2. From Prototype to Production


8.3. Testing Production Systems


8.4. Building Your Own Estimator


8.5. Where to Go from Here


8.5.1. Theory


8.5.2. Other Machine Learning Frameworks and Packages


8.5.3. Ranking, Recommender Systems, and Other Kinds of Learning


8.5.4. Probabilistic Modeling, Inference, and Probabilistic Programming


8.5.5. Neural Networks


8.5.6. Scaling to Larger Datasets


8.5.7. Honing Your Skills




8.6. Conclusion




Index


Show and hide more




Product information

Title: Introduction to Machine Learning with Python
Author(s): Andreas C. Müller, Sarah Guido
Release date: September 2016
Publisher(s): O'Reilly Media, Inc.
ISBN: 9781449369897





You might also like



video
Machine Learning, Data Science and Generative AI with Python

            by
            
              Frank Kane
            
          
This course begins with a Python crash course and then guides you on setting up Microsoft …



book
Machine Learning with Python for Everyone

            by
            
              Mark Fenner
            
          
The Complete Beginner's Guide to Understanding and Building Machine Learning Systems with Python will help you …



book
Python Machine Learning - Third Edition

            by
            
              Sebastian Raschka,
            
              Vahid Mirjalili
            
          
Applied machine learning with a solid foundation in theory. Revised and expanded for TensorFlow 2, GANs, …



book
Machine Learning with Python Cookbook, 2nd Edition

            by
            
              Kyle Gallatin,
            
              Chris Albon
            
          
This practical guide provides more than 200 self-contained recipes to help you solve machine learning challenges …













About O’Reilly

Teach/write/train
Careers
Press releases
Media coverage
Community partners
Affiliate program
Submit an RFP
Diversity
O’Reilly for marketers





Support

Contact us
Newsletters
Privacy policy


linkedin-logo
youtube-logo


International

Australia & New Zealand
Hong Kong & Taiwan
India
Indonesia
Japan





Download the O’Reilly App
Take O’Reilly with you and learn anywhere, anytime on your phone and tablet.






Watch on your big screen
View all O’Reilly videos, Superstream events, and Meet the Expert sessions on your home TV.






Do not sell my personal information






© 2024, O’Reilly Media, Inc. All trademarks and registered trademarks appearing on oreilly.com are the property of their respective owners.
Terms of service • Privacy policy • Editorial independence







Don’t leave empty-handed
Get Mark Richards’s Software Architecture Patterns ebook to better understand how to design components—and how they should interact.
It’s yours, free.
Get it now



Close






Check it out now on O’Reilly
Dive in for free with a 10-day trial of the O’Reilly learning platform—then explore all the other resources our members count on to build skills and solve problems every day.
Start your free trial
Become a member now



Close

























